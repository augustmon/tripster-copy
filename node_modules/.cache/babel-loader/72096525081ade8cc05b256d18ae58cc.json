{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\nvar _ParseOp = require(\"./ParseOp\");\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\nvar _unique = _interopRequireDefault(require(\"./unique\"));\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context18;\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = _sliceInstanceProperty(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      var _context16;\n      _forEachInstanceProperty2(_context16 = ownKeys(Object(source), true)).call(_context16, function (key) {\n        (0, _defineProperty3.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context17;\n      _forEachInstanceProperty2(_context17 = ownKeys(Object(source))).call(_context17, function (key) {\n        _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar uuidv4 = require('./uuid');\n/*:: export type Pointer = {\n  __type: string,\n  className: string,\n  objectId: string,\n};*/\n\n/*:: type SaveParams = {\n  method: string,\n  path: string,\n  body: AttributeMap,\n};*/\n\n/*:: export type SaveOptions = FullOptions & {\n  cascadeSave?: boolean,\n  context?: AttributeMap,\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/, attributes\n  /*:: ?: { [attr: string]: mixed }*/, options\n  /*:: ?: { ignoreValidation: boolean }*/) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n    var toSet = null;\n    this._objCount = objectCount++;\n    if (typeof className === 'string') {\n      this.className = className;\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   *\n   * @property {string} id\n   */\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get: /** Prototype getters / setters **/\n    function () /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n  }, {\n    key: \"createdAt\",\n    get: function () /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n  }, {\n    key: \"updatedAt\",\n    get: function () /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n    /** Private methods **/\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"_getId\",\n    value: function () /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function () /*: ParseObject | { id: string, className: string }*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n        if (!id) {\n          id = this._getId();\n        }\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function () /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n      var unset = {};\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function () /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/) {\n      var pending = this._getPendingOps();\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function () /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n      var stateController = _CoreManager.default.getObjectStateController();\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/, offline\n    /*:: ?: boolean*/) /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/ = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function () /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      var json = {};\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function () /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n      var body = this._getSaveJSON();\n      var path = 'classes/' + this.className;\n      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {\n        if (!this.createdAt) {\n          method = 'POST';\n          body.objectId = this.id;\n        } else {\n          method = 'PUT';\n          path += '/' + this.id;\n        }\n      } else if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/) {\n      var stateController = _CoreManager.default.getObjectStateController();\n      var state = stateController.getState(this._getStateIdentifier());\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/, status\n    /*: number*/) {\n      var changes = {};\n      var stateController = _CoreManager.default.getObjectStateController();\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n      this._migrateId(response.objectId);\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n  }, {\n    key: \"initialize\",\n    value: /** Public methods **/\n    function () {// NOOP\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/, offline\n    /*:: ?: boolean*/) /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n      var pending = this._getPendingOps();\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n      if (this.id) {\n        json.objectId = this.id;\n      }\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/) /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/) /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n      var pendingOps = this._getPendingOps();\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n  }, {\n    key: \"dirtyKeys\",\n    value: function () /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n      var keys = {};\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isDataAvailable\",\n    value: function () /*: boolean*/\n    {\n      var serverData = this._getServerData();\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n  }, {\n    key: \"toPointer\",\n    value: function () /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n  }, {\n    key: \"toOfflinePointer\",\n    value: function () /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/) /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/) /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n        value._ensureParentAndKey(this, attr);\n        return value;\n      }\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/) /*: string*/\n    {\n      var val = this.attributes[attr];\n      if (val == null) {\n        return '';\n      }\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n        val = val.toString();\n      }\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/) /*: boolean*/\n    {\n      var attributes = this.attributes;\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/, value\n    /*: mixed*/, options\n    /*:: ?: mixed*/) /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n      options = options || {};\n      var readonly = [];\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n      var currentAttributes = this.attributes; // Calculate new values\n\n      var newValues = {};\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n          return false;\n        }\n      } // Consolidate Ops\n\n      var pendingOps = this._getPendingOps();\n      var last = pendingOps.length - 1;\n      var stateController = _CoreManager.default.getObjectStateController();\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/, options\n    /*:: ?: { [opt: string]: mixed }*/) /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/, amount\n    /*:: ?: number*/) /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"decrement\",\n    value: function (attr\n    /*: string*/, amount\n    /*:: ?: number*/) /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/, item\n    /*: mixed*/) /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/, items\n    /*: Array<mixed>*/) /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/, item\n    /*: mixed*/) /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/, items\n    /*: Array<mixed>*/) /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/, item\n    /*: mixed*/) /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/, items\n    /*: Array<mixed>*/) /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/) /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      var attributes = this.attributes;\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n        attributes = copy;\n      }\n      if (clone.set) {\n        clone.set(attributes);\n      }\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n  }, {\n    key: \"newInstance\",\n    value: function () /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      clone.id = this.id;\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isNew\",\n    value: function () /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"existed\",\n    value: function () /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      var state = stateController.getState(this._getStateIdentifier());\n      if (state) {\n        return state.existed;\n      }\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\", false);\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n              case 6:\n                return _context.abrupt(\"return\", true);\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n                return _context.abrupt(\"return\", false);\n              case 13:\n                throw _context.t0;\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValid\",\n    value: function () /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/) /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n  }, {\n    key: \"getACL\",\n    value: function () /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/, options\n    /*:: ?: mixed*/) /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n  }, {\n    key: \"revert\",\n    value: function () /*: void*/\n    {\n      var keysToRevert;\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n      if (keys.length) {\n        keysToRevert = [];\n        var _iterator = _createForOfIteratorHelper(keys),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"clear\",\n    value: function () /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/) /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n      var controller = _CoreManager.default.getObjectController();\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String | Array<string | Array<string>>*/, options\n    /*: RequestOptions*/) /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Saves this object to the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection, and don't need to know when the save completes.\n     * If there is some problem with the object such that it can't be saved, it will be silently discarded.\n     *\n     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.\n     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is\n     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n  }, {\n    key: \"saveEventually\",\n    value: function () {\n      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*: SaveOptions*/) {\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.save(null, options);\n              case 3:\n                _context4.next = 11;\n                break;\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](0);\n                if (!(_context4.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context4.next = 11;\n                  break;\n                }\n                _context4.next = 10;\n                return _EventuallyQueue.default.save(this, options);\n              case 10:\n                _EventuallyQueue.default.poll();\n              case 11:\n                return _context4.abrupt(\"return\", this);\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n      return function () {\n        return _saveEventually.apply(this, arguments);\n      };\n    }()\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * Example 1: <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * Example 2: <pre>\n     * gameTurn.save(\"player\", \"Jake Cutter\");</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/, arg2\n    /*: SaveOptions | mixed*/, arg3\n    /*:: ?: SaveOptions*/) /*: Promise*/\n    {\n      var _this = this;\n      var attrs;\n      var options;\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n      if (attrs) {\n        var validation = this.validate(attrs);\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n        this.set(attrs, options);\n      }\n      options = options || {};\n      var saveOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n      var controller = _CoreManager.default.getObjectController();\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Deletes this object from the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection,\n     * and don't need to know when the delete completes. If there is some problem with the object\n     * such that it can't be deleted, the request will be silently discarded.\n     *\n     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted\n     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection\n     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n  }, {\n    key: \"destroyEventually\",\n    value: function () {\n      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options\n      /*: RequestOptions*/) {\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.destroy(options);\n              case 3:\n                _context5.next = 11;\n                break;\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n                if (!(_context5.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context5.next = 11;\n                  break;\n                }\n                _context5.next = 10;\n                return _EventuallyQueue.default.destroy(this, options);\n              case 10:\n                _EventuallyQueue.default.poll();\n              case 11:\n                return _context5.abrupt(\"return\", this);\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n      return function () {\n        return _destroyEventually.apply(this, arguments);\n      };\n    }()\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/) /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n  }, {\n    key: \"pin\",\n    value: function () /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n  }, {\n    key: \"unPin\",\n    value: function () /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                if (localDatastore.isEnabled) {\n                  _context6.next = 3;\n                  break;\n                }\n                return _context6.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context6.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n              case 6:\n                pin = _context6.sent;\n                return _context6.abrupt(\"return\", pin.length > 0);\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/) /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/) /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                if (localDatastore.isEnabled) {\n                  _context7.next = 3;\n                  break;\n                }\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context7.next = 6;\n                return localDatastore._serializeObject(objectKey);\n              case 6:\n                pinned = _context7.sent;\n                if (pinned) {\n                  _context7.next = 9;\n                  break;\n                }\n                throw new Error('Cannot fetch an unsaved ParseObject');\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n                this._finishFetch(result.toJSON());\n                return _context7.abrupt(\"return\", this);\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n  }], [{\n    key: \"_getClassMap\",\n    value: function () {\n      return classMap;\n    }\n  }, {\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/) {\n      var options\n      /*: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/, keys\n    /*: String | Array<string | Array<string>>*/, options\n    /*: RequestOptions*/) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/, keys\n    /*: String | Array<string | Array<string>>*/, options\n    /*: RequestOptions*/) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/, options) {\n      options = options || {};\n      var queryOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n      if ((0, _isArray.default)(options.include)) {\n        var _context8;\n        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/) {\n      var options\n      /*: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/, override\n    /*:: ?: boolean*/, dirty\n    /*:: ?: boolean*/) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);\n      var otherAttributes = {};\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n          if (dirty) {\n            o.set(_attr12, json[_attr12]);\n          }\n        }\n      }\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n        var preserved = null;\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n        o._clearServerData();\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n      o._finishFetch(otherAttributes);\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/, constructor\n    /*: any*/) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n      classMap[className] = constructor;\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Unegisters a subclass of Parse.Object with a specific class name.\n     *\n     * @param {string} className The class name of the subclass\n     */\n  }, {\n    key: \"unregisterSubclass\",\n    value: function (className\n    /*: string*/) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n      delete classMap[className];\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/, protoProps\n    /*: any*/, classProps\n    /*: any*/) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n        }\n      }\n      var adjustedClassName = className;\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n      var parentProto = ParseObject.prototype;\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/) /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/, objects\n    /*: Array<ParseObject>*/) /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/) /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/, objects\n    /*: Array<ParseObject>*/) /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllObjects\",\n    value: function () /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/) /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/, forceFetch\n  /*: boolean*/, options\n  /*: RequestOptions*/) /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n        if (!className) {\n          className = el.className;\n        }\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n        results.push(el);\n      });\n      if (error) {\n        return _promise.default.reject(error);\n      }\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n      if (options && options.include) {\n        query.include(options.include);\n      }\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n          return _regenerator.default.wrap(function (_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context9.next = 11;\n                    break;\n                  }\n                  obj = objs[i];\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context9.next = 8;\n                    break;\n                  }\n                  if (!forceFetch) {\n                    _context9.next = 8;\n                    break;\n                  }\n                  return _context9.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n                case 8:\n                  i++;\n                  _context9.next = 3;\n                  break;\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n                        _obj._finishFetch(idMap[id].toJSON());\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context9.prev = 13;\n                  _iterator2.s();\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context9.next = 21;\n                    break;\n                  }\n                  object = _step2.value;\n                  _context9.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n                case 19:\n                  _context9.next = 15;\n                  break;\n                case 21:\n                  _context9.next = 26;\n                  break;\n                case 23:\n                  _context9.prev = 23;\n                  _context9.t0 = _context9[\"catch\"](13);\n                  _iterator2.e(_context9.t0);\n                case 26:\n                  _context9.prev = 26;\n                  _iterator2.f();\n                  return _context9.finish(26);\n                case 29:\n                  return _context9.abrupt(\"return\", _promise.default.resolve(results));\n                case 30:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee6, null, [[13, 23, 26, 29]]);\n        }));\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n      var RESTController = _CoreManager.default.getRESTController();\n      var params = {};\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  target._clearPendingOps();\n                  target._clearServerData();\n                  target._finishFetch(response);\n                  _context10.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n                case 5:\n                  return _context10.abrupt(\"return\", target);\n                case 6:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee7);\n        }));\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n    return _promise.default.resolve();\n  },\n  destroy: function (target\n  /*: ParseObject | Array<ParseObject>*/, options\n  /*: RequestOptions*/) /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n              if (!(0, _isArray.default)(target)) {\n                _context13.next = 15;\n                break;\n              }\n              if (!(target.length < 1)) {\n                _context13.next = 6;\n                break;\n              }\n              return _context13.abrupt(\"return\", _promise.default.resolve([]));\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n                batches[batches.length - 1].push(obj);\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context13.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n                var aggregate, _iterator3, _step3, object;\n                return _regenerator.default.wrap(function (_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context11.next = 4;\n                          break;\n                        }\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context11.abrupt(\"return\", _promise.default.reject(aggregate));\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context11.prev = 5;\n                        _iterator3.s();\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context11.next = 13;\n                          break;\n                        }\n                        object = _step3.value;\n                        _context11.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n                      case 11:\n                        _context11.next = 7;\n                        break;\n                      case 13:\n                        _context11.next = 18;\n                        break;\n                      case 15:\n                        _context11.prev = 15;\n                        _context11.t0 = _context11[\"catch\"](5);\n                        _iterator3.e(_context11.t0);\n                      case 18:\n                        _context11.prev = 18;\n                        _iterator3.f();\n                        return _context11.finish(18);\n                      case 21:\n                        return _context11.abrupt(\"return\", _promise.default.resolve(target));\n                      case 22:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee8, null, [[5, 15, 18, 21]]);\n              }))));\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context13.next = 17;\n                break;\n              }\n              return _context13.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n                return _regenerator.default.wrap(function (_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        _context12.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n                      case 2:\n                        return _context12.abrupt(\"return\", _promise.default.resolve(target));\n                      case 3:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee9);\n              }))));\n            case 17:\n              return _context13.abrupt(\"return\", _promise.default.resolve(target));\n            case 18:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  },\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/, options\n  /*: RequestOptions*/) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n    var mapIdForPin = {};\n    var RESTController = _CoreManager.default.getRESTController();\n    var stateController = _CoreManager.default.getObjectStateController();\n    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n      var unsaved = (0, _concat.default)(target).call(target);\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/ = [];\n      var pending\n      /*: Array<ParseObject>*/ = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          if (allowCustomObjectId && !el.id) {\n            throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n          }\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {\n          var _iterator4, _step4, object;\n          return _regenerator.default.wrap(function (_context14) {\n            while (1) {\n              switch (_context14.prev = _context14.next) {\n                case 0:\n                  if (!objectError) {\n                    _context14.next = 2;\n                    break;\n                  }\n                  return _context14.abrupt(\"return\", _promise.default.reject(objectError));\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context14.prev = 3;\n                  _iterator4.s();\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context14.next = 13;\n                    break;\n                  }\n                  object = _step4.value;\n                  _context14.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n                case 9:\n                  _context14.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n                case 11:\n                  _context14.next = 5;\n                  break;\n                case 13:\n                  _context14.next = 18;\n                  break;\n                case 15:\n                  _context14.prev = 15;\n                  _context14.t0 = _context14[\"catch\"](3);\n                  _iterator4.e(_context14.t0);\n                case 18:\n                  _context14.prev = 18;\n                  _iterator4.f();\n                  return _context14.finish(18);\n                case 21:\n                  return _context14.abrupt(\"return\", _promise.default.resolve(target));\n                case 22:\n                case \"end\":\n                  return _context14.stop();\n              }\n            }\n          }, _callee11, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      if (allowCustomObjectId && !target.id) {\n        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n      } // generate _localId in case if cascadeSave=false\n\n      target._getId();\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n          return _promise.default.reject(error);\n        });\n      };\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {\n        return _regenerator.default.wrap(function (_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n              case 2:\n                _context15.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n              case 4:\n                return _context15.abrupt(\"return\", target);\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee12);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n    return _promise.default.resolve();\n  }\n};\n_CoreManager.default.setObjectController(DefaultController);\nvar _default = ParseObject;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_typeof3","_WeakMap","_Array$isArray2","_getIteratorMethod","_Symbol","_Array$from","_sliceInstanceProperty","_Object$defineProperty2","_Object$defineProperties","_Object$getOwnPropertyDescriptors","_forEachInstanceProperty2","_Object$getOwnPropertyDescriptor","_filterInstanceProperty","_Object$getOwnPropertySymbols","_Object$keys2","exports","value","default","_map","_find","_defineProperty2","_create","_promise","_isArray","_regenerator","_asyncToGenerator2","_concat","_getPrototypeOf","_includes","_stringify","_forEach","_keys","_freeze","_typeof2","_classCallCheck2","_createClass2","_defineProperty3","_indexOf","_CoreManager","_canBeSerialized","_decode","_encode","_escape2","_EventuallyQueue","_ParseACL","_parseDate","_ParseError","_ParseFile","_promiseUtils","_LocalDatastoreUtils","_ParseOp","_ParseQuery","_ParseRelation","SingleInstanceStateController","_interopRequireWildcard","_unique","UniqueInstanceStateController","_unsavedChildren","_getRequireWildcardCache","nodeInterop","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","key","Object","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_context18","_arrayLikeToArray","toString","constructor","name","test","arr","len","arr2","Array","ownKeys","object","enumerableOnly","keys","symbols","sym","enumerable","push","apply","_objectSpread","target","arguments","source","_context16","_context17","uuidv4","classMap","objectCount","singleInstance","setObjectStateController","getServerUrlPath","serverUrl","url","replace","substr","ParseObject","className","attributes","options","initialize","toSet","_objCount","_attr","Error","stateController","getObjectStateController","estimateAttributes","_getStateIdentifier","_getServerData","createdAt","updatedAt","id","_localId","localId","_getId","getServerData","serverData","unset","_attr2","undefined","setServerData","getPendingOps","keysToClear","pending","_getPendingOps","latest","objectCache","getObjectCache","dirty","_attr3","val","json","stringified","seen","offline","toJSON","__type","dirtyObjects","_getDirtyObjectAttributes","attr","isDotNotation","field","fieldName","split","SetOp","method","body","_getSaveJSON","path","objectId","initializeState","decoded","_attr4","_ensureParentAndKey","commitServerChanges","existed","state","getState","serverId","oldState","removeState","response","status","changes","popPendingState","RelationOp","applyTo","UnsetOp","_migrateId","_setExisted","mergeFirstPendingState","seenEntry","attrs","_attr5","_attr6","other","pendingOps","_attr7","_attr8","newOps","readonly","readOnlyAttributes","k","Op","__op","opFromJSON","relation","targetClassName","currentAttributes","newValues","_attr9","ignoreValidation","validation","validate","error","last","_attr10","nextOp","mergeWith","setPendingOp","amount","IncrementOp","item","AddOp","items","AddUniqueOp","RemoveOp","clone","copy","a","duplicateState","_exists","mark","_callee","query","wrap","_context","prev","abrupt","t0","code","OBJECT_NOT_FOUND","stop","ACL","OTHER_CAUSE","_key","INVALID_KEY_NAME","acl","keysToRevert","_len","_key2","_iterator","_step","_key3","_clearPendingOps","erasable","_attr11","fetchOptions","useMasterKey","sessionToken","context","include","_context2","_context3","controller","getObjectController","fetch","_saveEventually","_callee2","_context4","save","message","poll","arg1","arg2","arg3","_this","reject","saveOptions","installationId","unsaved","cascadeSave","then","_destroyEventually","_callee3","_context5","destroy","destroyOptions","resolve","pinAllWithName","DEFAULT_PIN","unPinAllWithName","_isPinned","_callee4","localDatastore","objectKey","pin","_context6","getLocalDatastore","isEnabled","getKeyForObject","fromPinWithName","sent","_fetchFromLocalDatastore","_callee5","pinned","result","_context7","_serializeObject","fromJSON","_finishFetch","clearAllState","list","queryOptions","handleIncludeOptions","fetchAll","fetchAllIfNeeded","_context8","batchSize","override","otherAttributes","_attr12","preserved","_preserveFieldsOnFetch","_clearServerData","protoProps","classProps","extend","adjustedClassName","parentProto","__super__","ParseObjectSubclass","writable","configurable","prop","_prop","createWithoutData","objects","_handlePinAllWithName","_handleUnPinAllWithName","unPinWithName","PIN_PREFIX","DefaultController","forceFetch","objs","ids","results","el","INVALID_CLASS_NAME","MISSING_OBJECT_ID","isDataAvailable","containedIn","_limit","_ref","_callee6","idMap","_i","_obj","_iterator2","_step2","_context9","_updateObjectIfPinned","finish","RESTController","getRESTController","params","join","request","_ref2","_callee7","_context10","_callee10","batches","deleteCompleted","errors","_context13","pop","batch","requests","_callee8","aggregate","_iterator3","_step3","_context11","AGGREGATE_ERROR","_destroyObjectIfPinned","_callee9","_context12","mapIdForPin","allowCustomObjectId","returnStatus","filesSaved","all","objectError","continueWhile","nextPending","batchReturned","resolvingPromise","batchReady","batchTasks","index","ready","pushPendingState","enqueueTask","responses","success","_status","_handleSaveResponse","serverError","_handleSaveError","when","_getSaveParams","INCORRECT_TYPE","_callee11","_iterator4","_step4","_context14","_updateLocalIdForObject","targetCopy","task","_callee12","_context15","setObjectController","_default"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/node_modules/parse/lib/browser/ParseObject.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\n\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\n\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context18;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context16;\n\n      _forEachInstanceProperty2(_context16 = ownKeys(Object(source), true)).call(_context16, function (key) {\n        (0, _defineProperty3.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context17;\n\n      _forEachInstanceProperty2(_context17 = ownKeys(Object(source))).call(_context17, function (key) {\n        _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar uuidv4 = require('./uuid');\n/*:: export type Pointer = {\n  __type: string,\n  className: string,\n  objectId: string,\n};*/\n\n/*:: type SaveParams = {\n  method: string,\n  path: string,\n  body: AttributeMap,\n};*/\n\n/*:: export type SaveOptions = FullOptions & {\n  cascadeSave?: boolean,\n  context?: AttributeMap,\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\n\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   *\n   * @property {string} id\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get:\n    /** Prototype getters / setters **/\n    function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n    /** Private methods **/\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | { id: string, className: string }*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = 'classes/' + this.className;\n\n      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {\n        if (!this.createdAt) {\n          method = 'POST';\n          body.objectId = this.id;\n        } else {\n          method = 'PUT';\n          path += '/' + this.id;\n        }\n      } else if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n  }, {\n    key: \"initialize\",\n    value:\n    /** Public methods **/\n    function () {// NOOP\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toOfflinePointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Calculate new values\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Saves this object to the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection, and don't need to know when the save completes.\n     * If there is some problem with the object such that it can't be saved, it will be silently discarded.\n     *\n     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.\n     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is\n     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n\n  }, {\n    key: \"saveEventually\",\n    value: function () {\n      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*: SaveOptions*/\n      ) {\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.save(null, options);\n\n              case 3:\n                _context4.next = 11;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!(_context4.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 10;\n                return _EventuallyQueue.default.save(this, options);\n\n              case 10:\n                _EventuallyQueue.default.poll();\n\n              case 11:\n                return _context4.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n\n      return function () {\n        return _saveEventually.apply(this, arguments);\n      };\n    }()\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * Example 1: <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * Example 2: <pre>\n     * gameTurn.save(\"player\", \"Jake Cutter\");</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Deletes this object from the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection,\n     * and don't need to know when the delete completes. If there is some problem with the object\n     * such that it can't be deleted, the request will be silently discarded.\n     *\n     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted\n     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection\n     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroyEventually\",\n    value: function () {\n      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options\n      /*: RequestOptions*/\n      ) {\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.destroy(options);\n\n              case 3:\n                _context5.next = 11;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!(_context5.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _context5.next = 10;\n                return _EventuallyQueue.default.destroy(this, options);\n\n              case 10:\n                _EventuallyQueue.default.poll();\n\n              case 11:\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n\n      return function () {\n        return _destroyEventually.apply(this, arguments);\n      };\n    }()\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context6.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context6.sent;\n                return _context6.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context7.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context7.sent;\n\n                if (pinned) {\n                  _context7.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context7.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n\n  }], [{\n    key: \"_getClassMap\",\n    value: function () {\n      return classMap;\n    }\n  }, {\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context8;\n\n        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    , dirty\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n\n          if (dirty) {\n            o.set(_attr12, json[_attr12]);\n          }\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Unegisters a subclass of Parse.Object with a specific class name.\n     *\n     * @param {string} className The class name of the subclass\n     */\n\n  }, {\n    key: \"unregisterSubclass\",\n    value: function (className\n    /*: string*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      delete classMap[className];\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n        }\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context9.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context9.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context9.next = 8;\n                    break;\n                  }\n\n                  return _context9.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context9.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context9.prev = 13;\n\n                  _iterator2.s();\n\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context9.next = 21;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context9.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 19:\n                  _context9.next = 15;\n                  break;\n\n                case 21:\n                  _context9.next = 26;\n                  break;\n\n                case 23:\n                  _context9.prev = 23;\n                  _context9.t0 = _context9[\"catch\"](13);\n\n                  _iterator2.e(_context9.t0);\n\n                case 26:\n                  _context9.prev = 26;\n\n                  _iterator2.f();\n\n                  return _context9.finish(26);\n\n                case 29:\n                  return _context9.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 30:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee6, null, [[13, 23, 26, 29]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  target._clearPendingOps();\n\n                  target._clearServerData();\n\n                  target._finishFetch(response);\n\n                  _context10.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 5:\n                  return _context10.abrupt(\"return\", target);\n\n                case 6:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    return _promise.default.resolve();\n  },\n  destroy: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context13.next = 15;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context13.next = 6;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context13.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n                var aggregate, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context11.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context11.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context11.prev = 5;\n\n                        _iterator3.s();\n\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context11.next = 13;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context11.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 11:\n                        _context11.next = 7;\n                        break;\n\n                      case 13:\n                        _context11.next = 18;\n                        break;\n\n                      case 15:\n                        _context11.prev = 15;\n                        _context11.t0 = _context11[\"catch\"](5);\n\n                        _iterator3.e(_context11.t0);\n\n                      case 18:\n                        _context11.prev = 18;\n\n                        _iterator3.f();\n\n                        return _context11.finish(18);\n\n                      case 21:\n                        return _context11.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 22:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee8, null, [[5, 15, 18, 21]]);\n              }))));\n\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context13.next = 17;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n                return _regenerator.default.wrap(function (_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        _context12.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context12.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee9);\n              }))));\n\n            case 17:\n              return _context13.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 18:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  },\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/\n      = [];\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          if (allowCustomObjectId && !el.id) {\n            throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n          }\n\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {\n          var _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context14) {\n            while (1) {\n              switch (_context14.prev = _context14.next) {\n                case 0:\n                  if (!objectError) {\n                    _context14.next = 2;\n                    break;\n                  }\n\n                  return _context14.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context14.prev = 3;\n\n                  _iterator4.s();\n\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context14.next = 13;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context14.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 9:\n                  _context14.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 11:\n                  _context14.next = 5;\n                  break;\n\n                case 13:\n                  _context14.next = 18;\n                  break;\n\n                case 15:\n                  _context14.prev = 15;\n                  _context14.t0 = _context14[\"catch\"](3);\n\n                  _iterator4.e(_context14.t0);\n\n                case 18:\n                  _context14.prev = 18;\n\n                  _iterator4.f();\n\n                  return _context14.finish(18);\n\n                case 21:\n                  return _context14.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 22:\n                case \"end\":\n                  return _context14.stop();\n              }\n            }\n          }, _callee11, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      if (allowCustomObjectId && !target.id) {\n        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n      } // generate _localId in case if cascadeSave=false\n\n\n      target._getId();\n\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {\n        return _regenerator.default.wrap(function (_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context15.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context15.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee12);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;"],"mappings":"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OAAO,CAAC;MAClE;MAEA,OAAOlG,YAAY,CAACrB,OAAO,CAAC0Q,mBAAmB,EAAE,CAACC,KAAK,CAAC8C,IAAI,EAAE,IAAI,EAAEC,YAAY,CAAC;IACnF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDvQ,GAAG,EAAE,qBAAqB;IAC1BpD,KAAK,EAAE,UAAU0T;IACjB,0BACE3N;IACF,8CACEyB;IACF,sBACE;MACAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvBA,OAAO,CAAC+I,OAAO,GAAGxK,IAAI;MACtB,OAAOsB,WAAW,CAACwM,QAAQ,CAACH,IAAI,EAAElM,OAAO,CAAC;IAC5C;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDpE,GAAG,EAAE,6BAA6B;IAClCpD,KAAK,EAAE,UAAU0T;IACjB,0BACE3N;IACF,8CACEyB;IACF,sBACE;MACAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvBA,OAAO,CAAC+I,OAAO,GAAGxK,IAAI;MACtB,OAAOsB,WAAW,CAACyM,gBAAgB,CAACJ,IAAI,EAAElM,OAAO,CAAC;IACpD;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDpE,GAAG,EAAE,kBAAkB;IACvBpD,KAAK,EAAE,UAAU0T;IACjB,0BACElM,OAAO,EAAE;MACTA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAImM,YAAY,GAAG,CAAC,CAAC;MAErB,IAAInM,OAAO,CAACjE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1CoQ,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"},"metadata":{},"sourceType":"script"}