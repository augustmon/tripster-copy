{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { Link } from \"react-router-dom\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/DisplayUsers/DisplayUsers\";\nimport ChatRoom from \"../pages/ChatRoom/ChatRoom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatSetup(props) {\n  _s();\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n  useEffect(() => {\n    // setSenderUserName(props.currentUser.get(\"username\"));\n    setReceiverUserName(props.selectedUser.get(\"username\"));\n  }, []);\n  async function startLiveChat() {\n    console.log(\"Current user name: \", senderUserName);\n    const usersArray = [Parse.User.current(), props.selectedUser];\n    console.log(\"users array\", usersArray);\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (senderUserName === null || receiverUserName === null) {\n      alert(\"Please inform both sender and receiver user names!\");\n      return false;\n    }\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", usersArray); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (chatRoomParseQueryResult !== undefined && chatRoomParseQueryResult !== null) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n\n    /*     let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (\n        senderParseQueryResult !== undefined &&\n        senderParseQueryResult !== null\n      ) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n     let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (\n        receiverParseQueryResult !== undefined &&\n        receiverParseQueryResult !== null\n      ) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User ID: \", receiverUserObject.id);\n        props.setSelectedUser(senderUserObject);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    } */\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(Parse.User.current());\n    setReceiverUserId(props.selectedUser.id);\n    setChatRoomId(chatRoomObject.id);\n    console.log(\"RECEIVER USER NAME: \", props.selectedUser.id);\n    console.log(\"RECEIVER USER ID: \", receiverUserId);\n    return true;\n  }\n  startLiveChat();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" chat setup ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), senderUserId !== null && senderUserId !== undefined && receiverUserId !== null && receiverUserId !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Live chat started! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(LiveChat, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatSetup, \"LcKkMJKQD9cYlCamGqebV9sEn6M=\");\n_c = ChatSetup;\nvar _c;\n$RefreshReg$(_c, \"ChatSetup\");","map":{"version":3,"names":["React","useEffect","useState","Parse","Link","LiveChat","ChatList","ChatRoom","ChatSetup","props","senderUserName","setSenderUserName","senderUserId","setSenderUserId","receiverUserName","setReceiverUserName","receiverUserId","setReceiverUserId","chatRoomId","setChatRoomId","selectedUser","get","startLiveChat","console","log","usersArray","User","current","alert","chatRoomObject","chatRoomParseQuery","Query","containsAll","chatRoomParseQueryResult","first","undefined","id","Object","set","save","error"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { Link } from \"react-router-dom\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/DisplayUsers/DisplayUsers\";\nimport ChatRoom from \"../pages/ChatRoom/ChatRoom\";\n\nexport default function ChatSetup(props) {\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n\n  useEffect(() => {\n    // setSenderUserName(props.currentUser.get(\"username\"));\n    setReceiverUserName(props.selectedUser.get(\"username\"));\n  }, []);\n\n  async function startLiveChat() {\n    console.log(\"Current user name: \", senderUserName);\n    const usersArray = [Parse.User.current(), props.selectedUser];\n    console.log(\"users array\", usersArray);\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (senderUserName === null || receiverUserName === null) {\n      alert(\"Please inform both sender and receiver user names!\");\n      return false;\n    }\n\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", usersArray); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (\n        chatRoomParseQueryResult !== undefined &&\n        chatRoomParseQueryResult !== null\n      ) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n\n    /*     let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (\n        senderParseQueryResult !== undefined &&\n        senderParseQueryResult !== null\n      ) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n\n    let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (\n        receiverParseQueryResult !== undefined &&\n        receiverParseQueryResult !== null\n      ) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User ID: \", receiverUserObject.id);\n        props.setSelectedUser(senderUserObject);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    } */\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(Parse.User.current());\n    setReceiverUserId(props.selectedUser.id);\n    setChatRoomId(chatRoomObject.id);\n    console.log(\"RECEIVER USER NAME: \", props.selectedUser.id);\n    console.log(\"RECEIVER USER ID: \", receiverUserId);\n    return true;\n  }\n\n  startLiveChat();\n\n  return (\n    <div>\n      <h1> chat setup ...</h1>\n\n      {senderUserId !== null &&\n        senderUserId !== undefined &&\n        receiverUserId !== null &&\n        receiverUserId !== undefined && (\n          <div>\n            <h1>Live chat started! </h1>\n            <LiveChat {...props} />\n          </div>\n        )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}