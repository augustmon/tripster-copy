{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/api/LiveChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { useParseQuery } from \"@parse/react\";\nimport { chatRoomSetup } from \"./chat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LiveChat(props) {\n  _s();\n  const [messageInput, setMessageInput] = useState(\"\");\n  if (props.chatRoom.id !== undefined && props.chatRoom.id !== null) {\n    useEffect(() => {\n      console.log(\"sender:\", props.sender.id);\n      console.log(\"receiver:\", props.receiver.id);\n      console.log(\"chatroom id\", props.chatRoom.id);\n\n      // get sender and receiver ID parse objects\n    }, []);\n  }\n  // get messsages that are attached to this chatroom\n  const messageQuery = new Parse.Query(\"Message\");\n  messageQuery.equalTo(\"chatRoomId\", props.chatRoom);\n  messageQuery.ascending(\"createdAt\");\n  messageQuery.includeAll();\n  // MIGHT DELETE everything except \"results\"\n  const {\n    isLive,\n    isLoading,\n    isSyncing,\n    results,\n    count,\n    error,\n    reload\n  } = useParseQuery(messageQuery, {\n    enableLocalDatastore: true,\n    enableLiveQuery: true\n  });\n  async function sendMessage() {\n    try {\n      const messageText = messageInput;\n\n      // CREATES a new Message object and save it\n      let Message = new Parse.Object(\"Message\");\n      Message.set(\"text\", messageText);\n      Message.set(\"senderId\", props.sender);\n      Message.set(\"receiverId\", props.receiver); // DELETE THIS? in group-chat it should be deleted!\n      Message.set(\"chatRoomId\", props.chatRoom); //\n      Message.save();\n      alert(\"New message saved: \" + messageText);\n      setMessageInput(\"\");\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // Helper to format createdAt value on Message\n  const formatDateToTime = date => {\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [results && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: results.sort((a, b) => a.get(\"createdAt\") > b.get(\"createdAt\")).map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n        className:\n        // checks if sender is the current user or not\n        // and designates sent or received to displayed message\n        result.get(\"senderId\").id === props.sender.id ? \"message-sent\" : \"message-received\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: result.get(\"text\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-time\",\n          children: formatDateToTime(result.get(\"createdAt\"))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-user\",\n          children: result.get(\"senderId\").get(\"username\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)]\n      }, result.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: messageInput,\n        onChange: event => setMessageInput(event.target.value),\n        placeholder: \"Type message here.....\",\n        size: \"large\",\n        type: \"message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-message\",\n        onClick: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveChat, \"xDO6OUhBHf7zfkjZ9Pn4yf2aC3s=\", false, function () {\n  return [useParseQuery];\n});\n_c = LiveChat;\nvar _c;\n$RefreshReg$(_c, \"LiveChat\");","map":{"version":3,"names":["React","useEffect","useState","Parse","useParseQuery","chatRoomSetup","LiveChat","props","messageInput","setMessageInput","chatRoom","id","undefined","console","log","sender","receiver","messageQuery","Query","equalTo","ascending","includeAll","isLive","isLoading","isSyncing","results","count","error","reload","enableLocalDatastore","enableLiveQuery","sendMessage","messageText","Message","Object","set","save","alert","formatDateToTime","date","getHours","getMinutes","getSeconds","sort","a","b","get","map","result","event","target","value"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/LiveChat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { useParseQuery } from \"@parse/react\";\nimport { chatRoomSetup } from \"./chat\";\n\nexport default function LiveChat(props) {\n  const [messageInput, setMessageInput] = useState(\"\");\n\n  if (props.chatRoom.id !== undefined && props.chatRoom.id !== null) {\n    useEffect(() => {\n      console.log(\"sender:\", props.sender.id);\n      console.log(\"receiver:\", props.receiver.id);\n      console.log(\"chatroom id\", props.chatRoom.id);\n\n      // get sender and receiver ID parse objects\n    }, []);\n  }\n  // get messsages that are attached to this chatroom\n  const messageQuery = new Parse.Query(\"Message\");\n  messageQuery.equalTo(\"chatRoomId\", props.chatRoom);\n  messageQuery.ascending(\"createdAt\");\n  messageQuery.includeAll();\n  // MIGHT DELETE everything except \"results\"\n  const { isLive, isLoading, isSyncing, results, count, error, reload } =\n    useParseQuery(messageQuery, {\n      enableLocalDatastore: true,\n      enableLiveQuery: true,\n    });\n\n  async function sendMessage() {\n    try {\n      const messageText = messageInput;\n\n      // CREATES a new Message object and save it\n      let Message = new Parse.Object(\"Message\");\n      Message.set(\"text\", messageText);\n      Message.set(\"senderId\", props.sender);\n      Message.set(\"receiverId\", props.receiver); // DELETE THIS? in group-chat it should be deleted!\n      Message.set(\"chatRoomId\", props.chatRoom); //\n      Message.save();\n      alert(\"New message saved: \" + messageText);\n\n      setMessageInput(\"\");\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // Helper to format createdAt value on Message\n  const formatDateToTime = (date) => {\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  };\n\n  return (\n    <div>\n      {results && (\n        <div className=\"messages\">\n          {results\n            .sort((a, b) => a.get(\"createdAt\") > b.get(\"createdAt\"))\n            .map((result) => (\n              <div\n                key={result.id}\n                className={\n                  // checks if sender is the current user or not\n                  // and designates sent or received to displayed message\n                  result.get(\"senderId\").id === props.sender.id\n                    ? \"message-sent\"\n                    : \"message-received\"\n                }\n              >\n                <div>{result.get(\"text\")}</div>\n                <div className=\"message-time\">\n                  {formatDateToTime(result.get(\"createdAt\"))}\n                </div>\n                <div className=\"message-user\">\n                  {result.get(\"senderId\").get(\"username\")}\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n\n      {/* <div className=\"status\">\n        {isLoading && <p className=\"title\">{\"Loading…\"}</p>}\n        {isSyncing && <p>{\"Syncing…\"}</p>}\n        {isLive ? <p>{\"Status: Live\"}</p> : <p>{\"Status: Offline\"}</p>}\n        {error && <p>{error.message}</p>}\n        {count && <p>{`Count: ${count}`}</p>}\n      </div> */}\n\n      <div>\n        <input\n          value={messageInput}\n          onChange={(event) => setMessageInput(event.target.value)}\n          placeholder={\"Type message here.....\"}\n          size=\"large\"\n          type={\"message\"}\n        />\n        <button className=\"send-message\" onClick={sendMessage}></button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,YAAY;AACnB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,aAAa,QAAQ,QAAQ;AAAC;AAEvC,eAAe,SAASC,QAAQ,CAACC,KAAK,EAAE;EAAA;EACtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpD,IAAIK,KAAK,CAACG,QAAQ,CAACC,EAAE,KAAKC,SAAS,IAAIL,KAAK,CAACG,QAAQ,CAACC,EAAE,KAAK,IAAI,EAAE;IACjEV,SAAS,CAAC,MAAM;MACdY,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEP,KAAK,CAACQ,MAAM,CAACJ,EAAE,CAAC;MACvCE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEP,KAAK,CAACS,QAAQ,CAACL,EAAE,CAAC;MAC3CE,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,KAAK,CAACG,QAAQ,CAACC,EAAE,CAAC;;MAE7C;IACF,CAAC,EAAE,EAAE,CAAC;EACR;EACA;EACA,MAAMM,YAAY,GAAG,IAAId,KAAK,CAACe,KAAK,CAAC,SAAS,CAAC;EAC/CD,YAAY,CAACE,OAAO,CAAC,YAAY,EAAEZ,KAAK,CAACG,QAAQ,CAAC;EAClDO,YAAY,CAACG,SAAS,CAAC,WAAW,CAAC;EACnCH,YAAY,CAACI,UAAU,EAAE;EACzB;EACA,MAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC,SAAS;IAAEC,OAAO;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAO,CAAC,GACnExB,aAAa,CAACa,YAAY,EAAE;IAC1BY,oBAAoB,EAAE,IAAI;IAC1BC,eAAe,EAAE;EACnB,CAAC,CAAC;EAEJ,eAAeC,WAAW,GAAG;IAC3B,IAAI;MACF,MAAMC,WAAW,GAAGxB,YAAY;;MAEhC;MACA,IAAIyB,OAAO,GAAG,IAAI9B,KAAK,CAAC+B,MAAM,CAAC,SAAS,CAAC;MACzCD,OAAO,CAACE,GAAG,CAAC,MAAM,EAAEH,WAAW,CAAC;MAChCC,OAAO,CAACE,GAAG,CAAC,UAAU,EAAE5B,KAAK,CAACQ,MAAM,CAAC;MACrCkB,OAAO,CAACE,GAAG,CAAC,YAAY,EAAE5B,KAAK,CAACS,QAAQ,CAAC,CAAC,CAAC;MAC3CiB,OAAO,CAACE,GAAG,CAAC,YAAY,EAAE5B,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC;MAC3CuB,OAAO,CAACG,IAAI,EAAE;MACdC,KAAK,CAAC,qBAAqB,GAAGL,WAAW,CAAC;MAE1CvB,eAAe,CAAC,EAAE,CAAC;IACrB,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdU,KAAK,CAACV,KAAK,CAAC;IACd;EACF;;EAEA;EACA,MAAMW,gBAAgB,GAAIC,IAAI,IAAK;IACjC,OAAQ,GAAEA,IAAI,CAACC,QAAQ,EAAG,IAAGD,IAAI,CAACE,UAAU,EAAG,IAAGF,IAAI,CAACG,UAAU,EAAG,EAAC;EACvE,CAAC;EAED,oBACE;IAAA,WACGjB,OAAO,iBACN;MAAK,SAAS,EAAC,UAAU;MAAA,UACtBA,OAAO,CACLkB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,GAAG,CAAC,WAAW,CAAC,GAAGD,CAAC,CAACC,GAAG,CAAC,WAAW,CAAC,CAAC,CACvDC,GAAG,CAAEC,MAAM,iBACV;QAEE,SAAS;QACP;QACA;QACAA,MAAM,CAACF,GAAG,CAAC,UAAU,CAAC,CAACnC,EAAE,KAAKJ,KAAK,CAACQ,MAAM,CAACJ,EAAE,GACzC,cAAc,GACd,kBACL;QAAA,wBAED;UAAA,UAAMqC,MAAM,CAACF,GAAG,CAAC,MAAM;QAAC;UAAA;UAAA;UAAA;QAAA,QAAO,eAC/B;UAAK,SAAS,EAAC,cAAc;UAAA,UAC1BR,gBAAgB,CAACU,MAAM,CAACF,GAAG,CAAC,WAAW,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QACtC,eACN;UAAK,SAAS,EAAC,cAAc;UAAA,UAC1BE,MAAM,CAACF,GAAG,CAAC,UAAU,CAAC,CAACA,GAAG,CAAC,UAAU;QAAC;UAAA;UAAA;UAAA;QAAA,QACnC;MAAA,GAfDE,MAAM,CAACrC,EAAE;QAAA;QAAA;QAAA;MAAA,QAiBjB;IAAC;MAAA;MAAA;MAAA;IAAA,QAEP,eAUD;MAAA,wBACE;QACE,KAAK,EAAEH,YAAa;QACpB,QAAQ,EAAGyC,KAAK,IAAKxC,eAAe,CAACwC,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;QACzD,WAAW,EAAE,wBAAyB;QACtC,IAAI,EAAC,OAAO;QACZ,IAAI,EAAE;MAAU;QAAA;QAAA;QAAA;MAAA,QAChB,eACF;QAAQ,SAAS,EAAC,cAAc;QAAC,OAAO,EAAEpB;MAAY;QAAA;QAAA;QAAA;MAAA,QAAU;IAAA;MAAA;MAAA;MAAA;IAAA,QAC5D;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GAjGuBzB,QAAQ;EAAA,QAmB5BF,aAAa;AAAA;AAAA,KAnBOE,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module"}