{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatSetup(props) {\n  _s();\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoom, setChatRoom] = useState(null);\n  async function startLiveChat() {\n    const usersArray = [Parse.User.current(), props.selectedUser];\n    console.log(\"users array\", usersArray);\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (Parse.User.current() === null || props.selectedUser === null) {\n      alert(\"Please inform both sender and receiver!\");\n      return false;\n    }\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", usersArray); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (chatRoomParseQueryResult !== undefined && chatRoomParseQueryResult !== null) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n\n    /*     let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (\n        senderParseQueryResult !== undefined &&\n        senderParseQueryResult !== null\n      ) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n     let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (\n        receiverParseQueryResult !== undefined &&\n        receiverParseQueryResult !== null\n      ) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User ID: \", receiverUserObject.id);\n        props.setSelectedUser(senderUserObject);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    } */\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(Parse.User.current().id);\n    setReceiverUserId(props.selectedUser.id);\n    setChatRoom(chatRoomObject);\n    console.log(\"RECEIVER USER NAME: \", props.selectedUser.get(\"username\"));\n    console.log(\"RECEIVER USER ID: \", props.selectedUser.id);\n    return true;\n  }\n  if (chatRoom === null || chatRoom === undefined) {\n    startLiveChat();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [chatRoom === undefined || chatRoom === null && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" chat setup ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 31\n    }, this), chatRoom !== undefined && chatRoom !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Live chat started! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LiveChat, {\n        chatRoom: chatRoom,\n        selectedUser: props.selectedUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatSetup, \"Ee2OuOZzdqxIZJZAOcyqF+4QyRg=\");\n_c = ChatSetup;\nvar _c;\n$RefreshReg$(_c, \"ChatSetup\");","map":{"version":3,"names":["React","useState","Parse","LiveChat","ChatSetup","props","senderUserId","setSenderUserId","receiverUserId","setReceiverUserId","chatRoom","setChatRoom","startLiveChat","usersArray","User","current","selectedUser","console","log","alert","chatRoomObject","chatRoomParseQuery","Query","containsAll","chatRoomParseQueryResult","first","undefined","id","Object","set","save","error","get"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\n\nexport default function ChatSetup(props) {\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoom, setChatRoom] = useState(null);\n\n  async function startLiveChat() {\n    const usersArray = [Parse.User.current(), props.selectedUser];\n    console.log(\"users array\", usersArray);\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (Parse.User.current() === null || props.selectedUser === null) {\n      alert(\"Please inform both sender and receiver!\");\n      return false;\n    }\n\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", usersArray); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (\n        chatRoomParseQueryResult !== undefined &&\n        chatRoomParseQueryResult !== null\n      ) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n\n    /*     let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (\n        senderParseQueryResult !== undefined &&\n        senderParseQueryResult !== null\n      ) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n\n    let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (\n        receiverParseQueryResult !== undefined &&\n        receiverParseQueryResult !== null\n      ) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User ID: \", receiverUserObject.id);\n        props.setSelectedUser(senderUserObject);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    } */\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(Parse.User.current().id);\n    setReceiverUserId(props.selectedUser.id);\n    setChatRoom(chatRoomObject);\n    console.log(\"RECEIVER USER NAME: \", props.selectedUser.get(\"username\"));\n    console.log(\"RECEIVER USER ID: \", props.selectedUser.id);\n    return true;\n  }\n\n  if (chatRoom === null || chatRoom === undefined) {\n    startLiveChat();\n  }\n\n  return (\n    <div>\n      {chatRoom === undefined ||\n        (chatRoom === null && <h1> chat setup ...</h1>)}\n\n      {chatRoom !== undefined && chatRoom !== null && (\n        <div>\n          <h1>Live chat started! </h1>\n          <LiveChat chatRoom={chatRoom} selectedUser={props.selectedUser} />\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}