{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/api/LiveChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { useParseQuery } from \"@parse/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LiveChat(props) {\n  _s();\n  // useEffect(() => {\n  //   reload();\n  //   console.log(\n  //     props.senderUserId,\n  //     props.receiverUserId,\n  //     props.senderUserName,\n  //     props.receiverUsername\n  //   );\n  // });\n\n  const [messageInput, setMessageInput] = useState(\"\");\n  const parseQuery = new Parse.Query(\"Message\");\n  // get messsages that involve both nicknames\n  parseQuery.containedIn(\"senderId\", [props.senderUserId, props.receiverUserId]);\n  parseQuery.containedIn(\"receiverId\", [props.senderUserId, props.receiverUserid]);\n  parseQuery.ascending(\"createdAt\");\n  parseQuery.includeAll();\n\n  // console.log(parseQuery);\n\n  const {\n    isLive,\n    isLoading,\n    isSyncing,\n    results,\n    count,\n    error,\n    reload\n  } = useParseQuery(parseQuery, {\n    enableLocalDatastore: true,\n    enableLiveQuery: true\n  });\n  async function sendMessage() {\n    try {\n      const messageText = messageInput;\n\n      // get sender and receiver username parse objects\n      // const senderNameObjectQuery = new Parse.Query(\"User\");\n      // senderNameObjectQuery.equalTo(\"username\", props.senderUserName);\n      // let senderNameObject = await senderNameObjectQuery.first();\n\n      // const receiverNameObjectQuery = new Parse.Query(\"User\");\n      // receiverNameObjectQuery.equalTo(\"username\", props.receiverUserName);\n      // let receiverNameObject = await receiverNameObjectQuery.first();\n\n      // get sender and receiver ID parse objects\n      const senderIdObjectQuery = new Parse.Query(\"User\");\n      senderIdObjectQuery.equalTo(\"objectId\", props.senderUserId);\n      let senderIdObject = await senderIdObjectQuery.first();\n      const receiverIdObjectQuery = new Parse.Query(\"User\");\n      receiverIdObjectQuery.equalTo(\"objectId\", props.receiverUserId);\n      let receiverIdObject = await receiverIdObjectQuery.first();\n\n      // get chatRoom ID parse object\n      const chatRoomObjectQuery = new Parse.Query(\"ChatRoom\");\n      chatRoomObjectQuery.equalTo(\"objectId\", props.chatRoomId);\n      let chatRoomObject = await chatRoomObjectQuery.first();\n\n      // create new message object and save it\n      let Message = new Parse.Object(\"Message\");\n      Message.set(\"text\", messageText);\n      Message.set(\"senderId\", senderIdObject);\n      Message.set(\"receiverId\", receiverIdObject);\n      // Message.set(\"sender\", senderNameObject);\n      // Message.set(\"receiver\", receiverNameObject);\n      Message.set(\"chatRoomId\", chatRoomObject); // object from setup!\n      Message.save();\n      alert(\"New message saved: \" + messageText);\n      setMessageInput(\"\");\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // Helper to format createdAt value on Message\n  const formatDateToTime = date => {\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [results, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `${props.senderUserName} sending, ${props.receiverUserName} receiving!`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new_message\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"new_message_title\",\n        children: \"New message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: messageInput,\n        onChange: event => setMessageInput(event.target.value),\n        placeholder: \"Your message...\",\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"primary\",\n        className: \"form_button\",\n        color: \"#208AEC\",\n        size: \"large\",\n        onClick: sendMessage,\n        children: \"Send message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list-status\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading…\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 23\n      }, this), isSyncing && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Syncing…\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 23\n      }, this), isLive ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Status: Live\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Status: Offline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 45\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }, this), count && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Count: ${count}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveChat, \"yxk3qyvRfz6x4nKjOdKQ+i2tQf0=\", false, function () {\n  return [useParseQuery];\n});\n_c = LiveChat;\nvar _c;\n$RefreshReg$(_c, \"LiveChat\");","map":{"version":3,"names":["React","useEffect","useState","Parse","useParseQuery","LiveChat","props","messageInput","setMessageInput","parseQuery","Query","containedIn","senderUserId","receiverUserId","receiverUserid","ascending","includeAll","isLive","isLoading","isSyncing","results","count","error","reload","enableLocalDatastore","enableLiveQuery","sendMessage","messageText","senderIdObjectQuery","equalTo","senderIdObject","first","receiverIdObjectQuery","receiverIdObject","chatRoomObjectQuery","chatRoomId","chatRoomObject","Message","Object","set","save","alert","formatDateToTime","date","getHours","getMinutes","getSeconds","senderUserName","receiverUserName","event","target","value","message"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/LiveChat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { useParseQuery } from \"@parse/react\";\n\nexport default function LiveChat(props) {\n  // useEffect(() => {\n  //   reload();\n  //   console.log(\n  //     props.senderUserId,\n  //     props.receiverUserId,\n  //     props.senderUserName,\n  //     props.receiverUsername\n  //   );\n  // });\n\n  const [messageInput, setMessageInput] = useState(\"\");\n\n  const parseQuery = new Parse.Query(\"Message\");\n  // get messsages that involve both nicknames\n  parseQuery.containedIn(\"senderId\", [\n    props.senderUserId,\n    props.receiverUserId,\n  ]);\n  parseQuery.containedIn(\"receiverId\", [\n    props.senderUserId,\n    props.receiverUserid,\n  ]);\n  parseQuery.ascending(\"createdAt\");\n  parseQuery.includeAll();\n\n  // console.log(parseQuery);\n\n  const { isLive, isLoading, isSyncing, results, count, error, reload } =\n    useParseQuery(parseQuery, {\n      enableLocalDatastore: true,\n      enableLiveQuery: true,\n    });\n\n  async function sendMessage() {\n    try {\n      const messageText = messageInput;\n\n      // get sender and receiver username parse objects\n      // const senderNameObjectQuery = new Parse.Query(\"User\");\n      // senderNameObjectQuery.equalTo(\"username\", props.senderUserName);\n      // let senderNameObject = await senderNameObjectQuery.first();\n\n      // const receiverNameObjectQuery = new Parse.Query(\"User\");\n      // receiverNameObjectQuery.equalTo(\"username\", props.receiverUserName);\n      // let receiverNameObject = await receiverNameObjectQuery.first();\n\n      // get sender and receiver ID parse objects\n      const senderIdObjectQuery = new Parse.Query(\"User\");\n      senderIdObjectQuery.equalTo(\"objectId\", props.senderUserId);\n      let senderIdObject = await senderIdObjectQuery.first();\n\n      const receiverIdObjectQuery = new Parse.Query(\"User\");\n      receiverIdObjectQuery.equalTo(\"objectId\", props.receiverUserId);\n      let receiverIdObject = await receiverIdObjectQuery.first();\n\n      // get chatRoom ID parse object\n      const chatRoomObjectQuery = new Parse.Query(\"ChatRoom\");\n      chatRoomObjectQuery.equalTo(\"objectId\", props.chatRoomId);\n      let chatRoomObject = await chatRoomObjectQuery.first();\n\n      // create new message object and save it\n      let Message = new Parse.Object(\"Message\");\n      Message.set(\"text\", messageText);\n      Message.set(\"senderId\", senderIdObject);\n      Message.set(\"receiverId\", receiverIdObject);\n      // Message.set(\"sender\", senderNameObject);\n      // Message.set(\"receiver\", receiverNameObject);\n      Message.set(\"chatRoomId\", chatRoomObject); // object from setup!\n      Message.save();\n      alert(\"New message saved: \" + messageText);\n\n      setMessageInput(\"\");\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // Helper to format createdAt value on Message\n  const formatDateToTime = (date) => {\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  };\n\n  return (\n    <div>\n      {/* {results && (\n        <div className=\"messages\">\n          {results\n            .sort((a, b) => a.get(\"createdAt\") > b.get(\"createdAt\"))\n            .map((result) => (\n              <div\n                key={result.id}\n                className={\n                  result.get(\"senderId\").id === props.senderUserId\n                    ? \"message_sent\"\n                    : \"message_received\"\n                }\n              >\n                <p className=\"message_bubble\">{result.get(\"text\")}</p>\n                <p className=\"message_time\">\n                  {formatDateToTime(result.get(\"createdAt\"))}\n                </p>\n                <p className=\"message_name\">\n                  {result.get(\"senderId\").get(\"name\")}\n                </p>\n              </div>\n            ))}\n        </div>\n      )} */}\n      {results}\n\n      <h2>\n        {`${props.senderUserName} sending, ${props.receiverUserName} receiving!`}\n      </h2>\n\n      <div className=\"new_message\">\n        <h2 className=\"new_message_title\">New message</h2>\n        <input\n          value={messageInput}\n          onChange={(event) => setMessageInput(event.target.value)}\n          placeholder={\"Your message...\"}\n          size=\"large\"\n        />\n        <button\n          type=\"primary\"\n          className=\"form_button\"\n          color={\"#208AEC\"}\n          size={\"large\"}\n          onClick={sendMessage}\n        >\n          Send message\n        </button>\n      </div>\n      <div className=\"message-list-status\">\n        {isLoading && <p>{\"Loading…\"}</p>}\n        {isSyncing && <p>{\"Syncing…\"}</p>}\n        {isLive ? <p>{\"Status: Live\"}</p> : <p>{\"Status: Offline\"}</p>}\n        {error && <p>{error.message}</p>}\n        {count && <p>{`Count: ${count}`}</p>}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}