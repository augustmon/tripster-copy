{"ast":null,"code":"import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \"id exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING NR ERROR: \" + error.message);\n  }\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingId);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(`New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`);\n    }\n  } catch (error) {\n    alert(`Error: ${error.message}`);\n  }\n}\nexport function queryBookingId(bookingIdInput) {\n  const Booking = Parse.Object.extend(\"Booking\");\n  let query = new Parse.Query(Booking);\n  query.equalTo(\"key\", \"a909\");\n  let result = query.find();\n  alert(`Succesfully found a booking: ${result.get(\"key\")}`);\n\n  // should return Booking.key object that can then be passed to user.set()\n  // eg. user.set(\"bookingId\", Booking.key)\n}","map":{"version":3,"names":["Parse","createParseUser","bookingId","name","passwordConfirm","id","queryBookingId","console","log","error","alert","message","user","User","set","save","get","bookingIdInput","Booking","Object","extend","query","Query","equalTo","result","find"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/user.js"],"sourcesContent":["import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \"id exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING NR ERROR: \" + error.message);\n  }\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingId);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(\n        `New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`\n      );\n    }\n  } catch (error) {\n    alert(`Error: ${error.message}`);\n  }\n}\n\nexport function queryBookingId(bookingIdInput) {\n  const Booking = Parse.Object.extend(\"Booking\");\n  let query = new Parse.Query(Booking);\n  query.equalTo(\"key\", \"a909\");\n  let result = query.find();\n  alert(`Succesfully found a booking: ${result.get(\"key\")}`);\n\n  // should return Booking.key object that can then be passed to user.set()\n  // eg. user.set(\"bookingId\", Booking.key)\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,yBAAyB;;AAE3C;AACA,OAAO,eAAeC,eAAe,CAACC,SAAS,EAAEC,IAAI,EAAEC,eAAe,EAAE;EACtE;EACA,IAAI;IACF,MAAMC,EAAE,GAAG,MAAMC,cAAc,CAACJ,SAAS,CAAC;IAC1C,IAAIG,EAAE,KAAK,IAAI,EAAE;MACfE,OAAO,CAACC,GAAG,CAACH,EAAE,GAAG,UAAU,CAAC;IAC9B;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,KAAK,CAAC,oBAAoB,GAAGD,KAAK,CAACE,OAAO,CAAC;EAC7C;EACA;EACA,IAAIC,IAAI,GAAG,IAAIZ,KAAK,CAACa,IAAI,EAAE;EAC3B;EACAD,IAAI,CAACE,GAAG,CAAC,WAAW,EAAEZ,SAAS,CAAC;EAChCU,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEX,IAAI,CAAC;EAC1BS,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEV,eAAe,CAAC;EACrC,IAAI;IACF;IACAQ,IAAI,GAAG,MAAMA,IAAI,CAACG,IAAI,EAAE;IACxB,IAAIH,IAAI,KAAK,IAAI,EAAE;MACjB;MACAF,KAAK,CACF,8CAA6CE,IAAI,CAACP,EAAG;AAC9D,UAAUO,IAAI,CAACI,GAAG,CAAC,UAAU,CAAE,KAAIJ,IAAI,CAACI,GAAG,CAAC,UAAU,CAAE,EAAC,CAClD;IACH;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,KAAK,CAAE,UAASD,KAAK,CAACE,OAAQ,EAAC,CAAC;EAClC;AACF;AAEA,OAAO,SAASL,cAAc,CAACW,cAAc,EAAE;EAC7C,MAAMC,OAAO,GAAGlB,KAAK,CAACmB,MAAM,CAACC,MAAM,CAAC,SAAS,CAAC;EAC9C,IAAIC,KAAK,GAAG,IAAIrB,KAAK,CAACsB,KAAK,CAACJ,OAAO,CAAC;EACpCG,KAAK,CAACE,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;EAC5B,IAAIC,MAAM,GAAGH,KAAK,CAACI,IAAI,EAAE;EACzBf,KAAK,CAAE,gCAA+Bc,MAAM,CAACR,GAAG,CAAC,KAAK,CAAE,EAAC,CAAC;;EAE1D;EACA;AACF"},"metadata":{},"sourceType":"module"}