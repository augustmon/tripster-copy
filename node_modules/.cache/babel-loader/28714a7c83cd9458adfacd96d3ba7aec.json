{"ast":null,"code":"import Parse from \"parse\";\nexport async function clearSelectedUsers() {\n  // Parse.User.current().set(\"selectedUsers\", null);\n  // Parse.User.current().save();\n\n  const parseQuery = new Parse.Query(\"ChatUsers\");\n  parseQuery.equalTo(\"owner\", Parse.User.current());\n  const queryResult = await parseQuery.findAll();\n  console.log(\"query result\", queryResult);\n  queryResult.forEach(result => result.destroy());\n}\nexport async function checkUsersArray(usersArray) {\n  // check if both UserName variables hold any values\n  if (usersArray === undefined || usersArray.length < 2) {\n    console.log(\"Trying to fetch users\");\n    return false;\n  } else {\n    console.log(\"Users are present\");\n    return true;\n  }\n}\n// DELETE THIS ^\n\nexport async function chatRoomSetup(usersArray) {\n  let chatRoomObject = null;\n  try {\n    const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n    chatRoomParseQuery.equalTo(\"users\", usersArray); // .equalTo ?\n    const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n    if (chatRoomParseQueryResult !== undefined && chatRoomParseQueryResult !== null) {\n      console.log(\"Entering Chat Room:\", chatRoomParseQueryResult.id);\n      chatRoomObject = chatRoomParseQueryResult;\n      // chatRoomObject.save();\n      return chatRoomObject;\n      //\n      //\n    } else if (usersArray.length >= 2) {\n      alert(\"CREATING NEW CHAT ROOM FOR\", usersArray);\n      chatRoomObject = new Parse.Object(\"ChatRoom\");\n      chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n      await chatRoomObject.save();\n      console.log(\"new chatroom:\", chatRoomObject.id);\n      return chatRoomObject;\n      //\n      //\n    } else {\n      console.log(\"not two users set\");\n    }\n  } catch (error) {\n    console.log(\"ChatRoom Error\", error);\n  }\n}","map":{"version":3,"names":["Parse","clearSelectedUsers","parseQuery","Query","equalTo","User","current","queryResult","findAll","console","log","forEach","result","destroy","checkUsersArray","usersArray","undefined","length","chatRoomSetup","chatRoomObject","chatRoomParseQuery","chatRoomParseQueryResult","first","id","alert","Object","set","save","error"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/chat.js"],"sourcesContent":["import Parse from \"parse\";\n\nexport async function clearSelectedUsers() {\n  // Parse.User.current().set(\"selectedUsers\", null);\n  // Parse.User.current().save();\n\n  const parseQuery = new Parse.Query(\"ChatUsers\");\n  parseQuery.equalTo(\"owner\", Parse.User.current());\n  const queryResult = await parseQuery.findAll();\n  console.log(\"query result\", queryResult);\n  queryResult.forEach((result) => result.destroy());\n}\n\nexport async function checkUsersArray(usersArray) {\n  // check if both UserName variables hold any values\n  if (usersArray === undefined || usersArray.length < 2) {\n    console.log(\"Trying to fetch users\");\n    return false;\n  } else {\n    console.log(\"Users are present\");\n    return true;\n  }\n}\n// DELETE THIS ^\n\nexport async function chatRoomSetup(usersArray) {\n  let chatRoomObject = null;\n  try {\n    const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n    chatRoomParseQuery.equalTo(\"users\", usersArray); // .equalTo ?\n    const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n    if (\n      chatRoomParseQueryResult !== undefined &&\n      chatRoomParseQueryResult !== null\n    ) {\n      console.log(\"Entering Chat Room:\", chatRoomParseQueryResult.id);\n      chatRoomObject = chatRoomParseQueryResult;\n      // chatRoomObject.save();\n      return chatRoomObject;\n      //\n      //\n    } else if (usersArray.length >= 2) {\n      alert(\"CREATING NEW CHAT ROOM FOR\", usersArray);\n      chatRoomObject = new Parse.Object(\"ChatRoom\");\n      chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n      await chatRoomObject.save();\n      console.log(\"new chatroom:\", chatRoomObject.id);\n      return chatRoomObject;\n      //\n      //\n    } else {\n      console.log(\"not two users set\");\n    }\n  } catch (error) {\n    console.log(\"ChatRoom Error\", error);\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,eAAeC,kBAAkB,GAAG;EACzC;EACA;;EAEA,MAAMC,UAAU,GAAG,IAAIF,KAAK,CAACG,KAAK,CAAC,WAAW,CAAC;EAC/CD,UAAU,CAACE,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAACK,IAAI,CAACC,OAAO,EAAE,CAAC;EACjD,MAAMC,WAAW,GAAG,MAAML,UAAU,CAACM,OAAO,EAAE;EAC9CC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,WAAW,CAAC;EACxCA,WAAW,CAACI,OAAO,CAAEC,MAAM,IAAKA,MAAM,CAACC,OAAO,EAAE,CAAC;AACnD;AAEA,OAAO,eAAeC,eAAe,CAACC,UAAU,EAAE;EAChD;EACA,IAAIA,UAAU,KAAKC,SAAS,IAAID,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;IACrDR,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,OAAO,KAAK;EACd,CAAC,MAAM;IACLD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChC,OAAO,IAAI;EACb;AACF;AACA;;AAEA,OAAO,eAAeQ,aAAa,CAACH,UAAU,EAAE;EAC9C,IAAII,cAAc,GAAG,IAAI;EACzB,IAAI;IACF,MAAMC,kBAAkB,GAAG,IAAIpB,KAAK,CAACG,KAAK,CAAC,UAAU,CAAC;IACtDiB,kBAAkB,CAAChB,OAAO,CAAC,OAAO,EAAEW,UAAU,CAAC,CAAC,CAAC;IACjD,MAAMM,wBAAwB,GAAG,MAAMD,kBAAkB,CAACE,KAAK,EAAE;IACjE,IACED,wBAAwB,KAAKL,SAAS,IACtCK,wBAAwB,KAAK,IAAI,EACjC;MACAZ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEW,wBAAwB,CAACE,EAAE,CAAC;MAC/DJ,cAAc,GAAGE,wBAAwB;MACzC;MACA,OAAOF,cAAc;MACrB;MACA;IACF,CAAC,MAAM,IAAIJ,UAAU,CAACE,MAAM,IAAI,CAAC,EAAE;MACjCO,KAAK,CAAC,4BAA4B,EAAET,UAAU,CAAC;MAC/CI,cAAc,GAAG,IAAInB,KAAK,CAACyB,MAAM,CAAC,UAAU,CAAC;MAC7CN,cAAc,CAACO,GAAG,CAAC,OAAO,EAAEX,UAAU,CAAC,CAAC,CAAC;MACzC,MAAMI,cAAc,CAACQ,IAAI,EAAE;MAC3BlB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAES,cAAc,CAACI,EAAE,CAAC;MAC/C,OAAOJ,cAAc;MACrB;MACA;IACF,CAAC,MAAM;MACLV,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC;EACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACdnB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEkB,KAAK,CAAC;EACtC;AACF"},"metadata":{},"sourceType":"module"}