{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { initializeParse } from \"@parse/react\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/ChatList/ChatList\";\n\n// Note the live query URL instead of the regular server url\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PARSE_APPLICATION_ID = \"XCuriaWlKUTt14yvNJVJ77kjQyC8yKFIOFqiVFck\";\nconst PARSE_LIVE_QUERY_URL = \"https://tripster.b4a.io/\";\nconst PARSE_JAVASCRIPT_KEY = \"JxCHF3R5JB8VH3r8UXI9LCCEI14N3IdNIvrRhgIL\";\n\n// Initialize parse using @parse/react instead of regular parse JS SDK\ninitializeParse(PARSE_LIVE_QUERY_URL, PARSE_APPLICATION_ID, PARSE_JAVASCRIPT_KEY);\n\n// Parse.initialize(\n//   \"XCuriaWlKUTt14yvNJVJ77kjQyC8yKFIOFqiVFck\",\n//   \"JxCHF3R5JB8VH3r8UXI9LCCEI14N3IdNIvrRhgIL\"\n// ); //PASTE HERE YOUR Back4App APPLICATION ID AND YOUR JavaScript KEY\n// Parse.serverURL = \"https://parseapi.back4app.com/\";\n// // Parse.serverURL = \"tripster.b4a.io\";\n\nexport default function ChatSetup() {\n  _s();\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"bbb\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n  // const [chatRoomObject, setChatRoomObject] = useState(null);\n\n  const currentUser = Parse.User.current();\n  const currentUserName = currentUser.get(\"username\");\n  useEffect(() => {\n    setSenderUserName(currentUserName);\n    setReceiverUserName(\"bbb\");\n  }, []);\n  console.log(\"Current user name: \", currentUserName);\n  const usersArray = [senderUserName, receiverUserName];\n  console.log(\"users array\", usersArray);\n  async function startLiveChat() {\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (senderUserName === null || receiverUserName === null) {\n      alert(\"Please inform both sender and receiver user names!\");\n      return false;\n    }\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", [\"testman\", \"bbb\"]); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (chatRoomParseQueryResult !== undefined && chatRoomParseQueryResult !== null) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray);\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n    let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (senderParseQueryResult !== undefined && senderParseQueryResult !== null) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n    let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (receiverParseQueryResult !== undefined && receiverParseQueryResult !== null) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User Object: \", receiverUserObject);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    }\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(senderUserObject.id);\n    setReceiverUserId(receiverUserObject.id);\n    setChatRoomId(chatRoomObject.id);\n    console.log(\"RECEIVER USER ID: \", receiverUserId);\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" CHAT SETUP PAGE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), senderUserId === null && receiverUserId === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startLiveChat,\n        children: \"Start Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), senderUserId !== null && receiverUserId !== null && senderUserId !== undefined && receiverUserId !== undefined && /*#__PURE__*/_jsxDEV(LiveChat, {\n      senderUserName: senderUserName,\n      senderUserId: senderUserId,\n      receiverUserName: receiverUserName,\n      receiverUserId: receiverUserId,\n      chatRoomId: chatRoomId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatSetup, \"EdZOor4YqZDARIXBNr2NvG3xnpk=\");\n_c = ChatSetup;\nvar _c;\n$RefreshReg$(_c, \"ChatSetup\");","map":{"version":3,"names":["React","useEffect","useState","Parse","initializeParse","LiveChat","ChatList","PARSE_APPLICATION_ID","PARSE_LIVE_QUERY_URL","PARSE_JAVASCRIPT_KEY","ChatSetup","senderUserName","setSenderUserName","senderUserId","setSenderUserId","receiverUserName","setReceiverUserName","receiverUserId","setReceiverUserId","chatRoomId","setChatRoomId","currentUser","User","current","currentUserName","get","console","log","usersArray","startLiveChat","alert","chatRoomObject","chatRoomParseQuery","Query","containsAll","chatRoomParseQueryResult","first","undefined","id","Object","set","save","error","senderUserObject","senderParseQuery","equalTo","senderParseQueryResult","receiverUserObject","receiverParseQuery","receiverParseQueryResult"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { initializeParse } from \"@parse/react\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/ChatList/ChatList\";\n\n// Note the live query URL instead of the regular server url\nconst PARSE_APPLICATION_ID = \"XCuriaWlKUTt14yvNJVJ77kjQyC8yKFIOFqiVFck\";\nconst PARSE_LIVE_QUERY_URL = \"https://tripster.b4a.io/\";\nconst PARSE_JAVASCRIPT_KEY = \"JxCHF3R5JB8VH3r8UXI9LCCEI14N3IdNIvrRhgIL\";\n\n// Initialize parse using @parse/react instead of regular parse JS SDK\ninitializeParse(\n  PARSE_LIVE_QUERY_URL,\n  PARSE_APPLICATION_ID,\n  PARSE_JAVASCRIPT_KEY\n);\n\n// Parse.initialize(\n//   \"XCuriaWlKUTt14yvNJVJ77kjQyC8yKFIOFqiVFck\",\n//   \"JxCHF3R5JB8VH3r8UXI9LCCEI14N3IdNIvrRhgIL\"\n// ); //PASTE HERE YOUR Back4App APPLICATION ID AND YOUR JavaScript KEY\n// Parse.serverURL = \"https://parseapi.back4app.com/\";\n// // Parse.serverURL = \"tripster.b4a.io\";\n\nexport default function ChatSetup() {\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"bbb\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n  // const [chatRoomObject, setChatRoomObject] = useState(null);\n\n  const currentUser = Parse.User.current();\n  const currentUserName = currentUser.get(\"username\");\n\n  useEffect(() => {\n    setSenderUserName(currentUserName);\n    setReceiverUserName(\"bbb\");\n  }, []);\n\n  console.log(\"Current user name: \", currentUserName);\n  const usersArray = [senderUserName, receiverUserName];\n  console.log(\"users array\", usersArray);\n\n  async function startLiveChat() {\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (senderUserName === null || receiverUserName === null) {\n      alert(\"Please inform both sender and receiver user names!\");\n      return false;\n    }\n\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", [\"testman\", \"bbb\"]); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (\n        chatRoomParseQueryResult !== undefined &&\n        chatRoomParseQueryResult !== null\n      ) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray);\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n\n    let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (\n        senderParseQueryResult !== undefined &&\n        senderParseQueryResult !== null\n      ) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n\n    let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (\n        receiverParseQueryResult !== undefined &&\n        receiverParseQueryResult !== null\n      ) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User Object: \", receiverUserObject);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    }\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(senderUserObject.id);\n    setReceiverUserId(receiverUserObject.id);\n    setChatRoomId(chatRoomObject.id);\n    console.log(\"RECEIVER USER ID: \", receiverUserId);\n    return true;\n  }\n\n  return (\n    <div>\n      <h1> CHAT SETUP PAGE</h1>\n      {senderUserId === null && receiverUserId === null && (\n        <div>\n          <button onClick={startLiveChat}>Start Live Chat</button>\n          <ChatList />\n        </div>\n      )}\n      {senderUserId !== null &&\n        receiverUserId !== null &&\n        senderUserId !== undefined &&\n        receiverUserId !== undefined && (\n          <LiveChat\n            senderUserName={senderUserName}\n            senderUserId={senderUserId}\n            receiverUserName={receiverUserName}\n            receiverUserId={receiverUserId}\n            chatRoomId={chatRoomId}\n          />\n        )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}