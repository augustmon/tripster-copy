{"ast":null,"code":"import Parse from \"parse/dist/parse.min.js\";\nexport async function logInUser(username, password) {\n  try {\n    console.log(username, \"loggin in\");\n    let userLoggingIn = await Parse.User.logIn(username, password);\n    alert(\"Succesfully loggin in user:\", userLoggingIn.get(\"username\"));\n  } catch (error) {\n    alert(error);\n  }\n}\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \" Booking key exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING KEY ERROR: \" + error.message);\n  }\n\n  /*  try {\n    const bookingObject = await queryBookingObject(bookingId);\n    console.log(bookingObject);\n  } catch (error) {\n    alert(\"Booking OBJECT error: \" + error.message);\n  } */\n\n  const bookingObject = await queryBookingObject(bookingId);\n\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingObject);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(`New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`);\n    }\n  } catch (error) {\n    alert(`User Signup Error: ${error.message}`);\n  }\n}\nasync function queryBookingId(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n  let returnKey = results[0].get(\"key\");\n  return returnKey;\n}\nasync function queryBookingObject(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n  let returnObject = results[0];\n  return returnObject;\n}\n\n// export async function doUserLogIn(username, password, bookingnumber) {\n//   console.log(\"LOGGING IN \");\n\n//   try {\n//     const loggedInUser = await Parse.User.logIn(\n//       username,\n//       password,\n//       bookingnumber\n//     );\n//     if ((bookingnumber, username, password !== null)) {\n//     alert(\n//       `Success! User ${loggedInUser.get(\"username\")} has successfully signed in!`\n//     )}\n//     else {\n//       console.log(\"ERROR\")\n//     }\n//   }\n// }\n\n//     const currentUser = await Parse.User.current();\n//     console.log(loggedInUser === currentUser);\n\n//     let user = doUserLogIn();\n//     user.set(\"bookingId\", bookingnumber);\n//     user.set(\"username\", username);\n//     user.set(\"password\", password);\n\n//     getCurrentUser();\n//     return true;\n//   } catch (error) {\n//     alert(`Your info was not correct! ${error.message}`);\n//     return false;\n//   }\n// }","map":{"version":3,"names":["Parse","logInUser","username","password","console","log","userLoggingIn","User","logIn","alert","get","error","createParseUser","bookingId","name","passwordConfirm","id","queryBookingId","message","bookingObject","queryBookingObject","user","set","save","bookingIdInput","parseQuery","Query","equalTo","results","find","returnKey","returnObject"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/user.js"],"sourcesContent":["import Parse from \"parse/dist/parse.min.js\";\n\nexport async function logInUser(username, password) {\n  try {\n    console.log(username, \"loggin in\");\n    let userLoggingIn = await Parse.User.logIn(username, password);\n    alert(\"Succesfully loggin in user:\", userLoggingIn.get(\"username\"));\n  } catch (error) {\n    alert(error);\n  }\n}\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \" Booking key exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING KEY ERROR: \" + error.message);\n  }\n\n  /*  try {\n    const bookingObject = await queryBookingObject(bookingId);\n    console.log(bookingObject);\n  } catch (error) {\n    alert(\"Booking OBJECT error: \" + error.message);\n  } */\n\n  const bookingObject = await queryBookingObject(bookingId);\n\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingObject);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(\n        `New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`\n      );\n    }\n  } catch (error) {\n    alert(`User Signup Error: ${error.message}`);\n  }\n}\n\nasync function queryBookingId(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n\n  let returnKey = results[0].get(\"key\");\n  return returnKey;\n}\n\nasync function queryBookingObject(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n\n  let returnObject = results[0];\n  return returnObject;\n}\n\n// export async function doUserLogIn(username, password, bookingnumber) {\n//   console.log(\"LOGGING IN \");\n\n//   try {\n//     const loggedInUser = await Parse.User.logIn(\n//       username,\n//       password,\n//       bookingnumber\n//     );\n//     if ((bookingnumber, username, password !== null)) {\n//     alert(\n//       `Success! User ${loggedInUser.get(\"username\")} has successfully signed in!`\n//     )}\n//     else {\n//       console.log(\"ERROR\")\n//     }\n//   }\n// }\n\n//     const currentUser = await Parse.User.current();\n//     console.log(loggedInUser === currentUser);\n\n//     let user = doUserLogIn();\n//     user.set(\"bookingId\", bookingnumber);\n//     user.set(\"username\", username);\n//     user.set(\"password\", password);\n\n//     getCurrentUser();\n//     return true;\n//   } catch (error) {\n//     alert(`Your info was not correct! ${error.message}`);\n//     return false;\n//   }\n// }\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,yBAAyB;AAE3C,OAAO,eAAeC,SAAS,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAClD,IAAI;IACFC,OAAO,CAACC,GAAG,CAACH,QAAQ,EAAE,WAAW,CAAC;IAClC,IAAII,aAAa,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACC,KAAK,CAACN,QAAQ,EAAEC,QAAQ,CAAC;IAC9DM,KAAK,CAAC,6BAA6B,EAAEH,aAAa,CAACI,GAAG,CAAC,UAAU,CAAC,CAAC;EACrE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,KAAK,CAACE,KAAK,CAAC;EACd;AACF;;AAEA;AACA,OAAO,eAAeC,eAAe,CAACC,SAAS,EAAEC,IAAI,EAAEC,eAAe,EAAE;EACtE;EACA,IAAI;IACF,MAAMC,EAAE,GAAG,MAAMC,cAAc,CAACJ,SAAS,CAAC;IAC1C,IAAIG,EAAE,KAAK,IAAI,EAAE;MACfZ,OAAO,CAACC,GAAG,CAACW,EAAE,GAAG,oBAAoB,CAAC;IACxC;EACF,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdF,KAAK,CAAC,qBAAqB,GAAGE,KAAK,CAACO,OAAO,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE,MAAMC,aAAa,GAAG,MAAMC,kBAAkB,CAACP,SAAS,CAAC;;EAEzD;EACA,IAAIQ,IAAI,GAAG,IAAIrB,KAAK,CAACO,IAAI,EAAE;EAC3B;EACAc,IAAI,CAACC,GAAG,CAAC,WAAW,EAAEH,aAAa,CAAC;EACpCE,IAAI,CAACC,GAAG,CAAC,UAAU,EAAER,IAAI,CAAC;EAC1BO,IAAI,CAACC,GAAG,CAAC,UAAU,EAAEP,eAAe,CAAC;EACrC,IAAI;IACF;IACAM,IAAI,GAAG,MAAMA,IAAI,CAACE,IAAI,EAAE;IACxB,IAAIF,IAAI,KAAK,IAAI,EAAE;MACjB;MACAZ,KAAK,CACF,8CAA6CY,IAAI,CAACL,EAAG;AAC9D,UAAUK,IAAI,CAACX,GAAG,CAAC,UAAU,CAAE,KAAIW,IAAI,CAACX,GAAG,CAAC,UAAU,CAAE,EAAC,CAClD;IACH;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,KAAK,CAAE,sBAAqBE,KAAK,CAACO,OAAQ,EAAC,CAAC;EAC9C;AACF;AAEA,eAAeD,cAAc,CAACO,cAAc,EAAE;EAC5C,IAAIC,UAAU,GAAG,IAAIzB,KAAK,CAAC0B,KAAK,CAAC,SAAS,CAAC;EAC3CD,UAAU,CAACE,OAAO,CAAC,KAAK,EAAEH,cAAc,CAAC;EACzC,IAAII,OAAO,GAAG,MAAMH,UAAU,CAACI,IAAI,EAAE;EAErC,IAAIC,SAAS,GAAGF,OAAO,CAAC,CAAC,CAAC,CAAClB,GAAG,CAAC,KAAK,CAAC;EACrC,OAAOoB,SAAS;AAClB;AAEA,eAAeV,kBAAkB,CAACI,cAAc,EAAE;EAChD,IAAIC,UAAU,GAAG,IAAIzB,KAAK,CAAC0B,KAAK,CAAC,SAAS,CAAC;EAC3CD,UAAU,CAACE,OAAO,CAAC,KAAK,EAAEH,cAAc,CAAC;EACzC,IAAII,OAAO,GAAG,MAAMH,UAAU,CAACI,IAAI,EAAE;EAErC,IAAIE,YAAY,GAAGH,OAAO,CAAC,CAAC,CAAC;EAC7B,OAAOG,YAAY;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}