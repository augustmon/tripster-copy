{"ast":null,"code":"import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \" Booking key exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING KEY ERROR: \" + error.message);\n  }\n\n  /*  try {\n    const bookingObject = await queryBookingObject(bookingId);\n    console.log(bookingObject);\n  } catch (error) {\n    alert(\"Booking OBJECT error: \" + error.message);\n  } */\n\n  const bookingObject = await queryBookingObject(bookingId);\n\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingObject);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(`New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`);\n    }\n  } catch (error) {\n    alert(`User Signup Error: ${error.message}`);\n  }\n}\nasync function queryBookingId(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n  let returnKey = results[0].get(\"key\");\n  return returnKey;\n}\nasync function queryBookingObject(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n  let returnObject = results[0];\n  return returnObject;\n}\nexport async function doUserLogIn(bookingnumber, username, password) {\n  const bookingIdValue = bookingnumber;\n  const usernameValue = username;\n  const passwordValue = password;\n  try {\n    const loggedInUser = await Parse.User.logIn(bookingIdValue, usernameValue, passwordValue);\n    if (bookingIdValue, usernameValue, passwordValue !== null) {}\n    alert(`Success! User ${loggedInUser.get('username')} has successfully signed in!`);\n    const currentUser = await Parse.User.current();\n    console.log(loggedInUser === currentUser);\n    let user = doUserLogIn();\n    user.set(\"bookingId\", bookingnumber);\n    user.set(\"username\", username);\n    user.set(\"password\", password);\n    getCurrentUser();\n    return true;\n  } catch (error) {\n    alert(`Your info was not correct! ${error.message}`);\n    return false;\n  }\n}\n;","map":{"version":3,"names":["Parse","createParseUser","bookingId","name","passwordConfirm","id","queryBookingId","console","log","error","alert","message","bookingObject","queryBookingObject","user","User","set","save","get","bookingIdInput","parseQuery","Query","equalTo","results","find","returnKey","returnObject","doUserLogIn","bookingnumber","username","password","bookingIdValue","usernameValue","passwordValue","loggedInUser","logIn","currentUser","current","getCurrentUser"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/user.js"],"sourcesContent":["import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \" Booking key exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING KEY ERROR: \" + error.message);\n  }\n\n  /*  try {\n    const bookingObject = await queryBookingObject(bookingId);\n    console.log(bookingObject);\n  } catch (error) {\n    alert(\"Booking OBJECT error: \" + error.message);\n  } */\n\n  const bookingObject = await queryBookingObject(bookingId);\n\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingObject);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(\n        `New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`\n      );\n    }\n  } catch (error) {\n    alert(`User Signup Error: ${error.message}`);\n  }\n}\n\nasync function queryBookingId(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n\n  let returnKey = results[0].get(\"key\");\n  return returnKey;\n}\n\nasync function queryBookingObject(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n\n  let returnObject = results[0];\n  return returnObject;\n}\n\n\n  export async function doUserLogIn(bookingnumber, username, password) {\n    const bookingIdValue = bookingnumber;\n    const usernameValue = username;\n    const passwordValue = password;\n    try {\n      const loggedInUser = await Parse.User.logIn(bookingIdValue, usernameValue, passwordValue);\n      if (bookingIdValue, usernameValue, passwordValue !== null) {\n      }\n      alert(\n        `Success! User ${loggedInUser.get(\n          'username'\n        )} has successfully signed in!`\n      );\n\n    const currentUser = await Parse.User.current();\n    console.log(loggedInUser === currentUser);\n    \n    let user = doUserLogIn ();\n    user.set(\"bookingId\", bookingnumber);\n    user.set(\"username\", username);\n    user.set(\"password\", password);\n   \n    getCurrentUser();\n    return true;\n  } catch (error) {\n    \n    alert(`Your info was not correct! ${error.message}`);\n    return false;\n  }\n};\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,yBAAyB;;AAE3C;AACA,OAAO,eAAeC,eAAe,CAACC,SAAS,EAAEC,IAAI,EAAEC,eAAe,EAAE;EACtE;EACA,IAAI;IACF,MAAMC,EAAE,GAAG,MAAMC,cAAc,CAACJ,SAAS,CAAC;IAC1C,IAAIG,EAAE,KAAK,IAAI,EAAE;MACfE,OAAO,CAACC,GAAG,CAACH,EAAE,GAAG,oBAAoB,CAAC;IACxC;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,KAAK,CAAC,qBAAqB,GAAGD,KAAK,CAACE,OAAO,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE,MAAMC,aAAa,GAAG,MAAMC,kBAAkB,CAACX,SAAS,CAAC;;EAEzD;EACA,IAAIY,IAAI,GAAG,IAAId,KAAK,CAACe,IAAI,EAAE;EAC3B;EACAD,IAAI,CAACE,GAAG,CAAC,WAAW,EAAEJ,aAAa,CAAC;EACpCE,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEb,IAAI,CAAC;EAC1BW,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEZ,eAAe,CAAC;EACrC,IAAI;IACF;IACAU,IAAI,GAAG,MAAMA,IAAI,CAACG,IAAI,EAAE;IACxB,IAAIH,IAAI,KAAK,IAAI,EAAE;MACjB;MACAJ,KAAK,CACF,8CAA6CI,IAAI,CAACT,EAAG;AAC9D,UAAUS,IAAI,CAACI,GAAG,CAAC,UAAU,CAAE,KAAIJ,IAAI,CAACI,GAAG,CAAC,UAAU,CAAE,EAAC,CAClD;IACH;EACF,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,KAAK,CAAE,sBAAqBD,KAAK,CAACE,OAAQ,EAAC,CAAC;EAC9C;AACF;AAEA,eAAeL,cAAc,CAACa,cAAc,EAAE;EAC5C,IAAIC,UAAU,GAAG,IAAIpB,KAAK,CAACqB,KAAK,CAAC,SAAS,CAAC;EAC3CD,UAAU,CAACE,OAAO,CAAC,KAAK,EAAEH,cAAc,CAAC;EACzC,IAAII,OAAO,GAAG,MAAMH,UAAU,CAACI,IAAI,EAAE;EAErC,IAAIC,SAAS,GAAGF,OAAO,CAAC,CAAC,CAAC,CAACL,GAAG,CAAC,KAAK,CAAC;EACrC,OAAOO,SAAS;AAClB;AAEA,eAAeZ,kBAAkB,CAACM,cAAc,EAAE;EAChD,IAAIC,UAAU,GAAG,IAAIpB,KAAK,CAACqB,KAAK,CAAC,SAAS,CAAC;EAC3CD,UAAU,CAACE,OAAO,CAAC,KAAK,EAAEH,cAAc,CAAC;EACzC,IAAII,OAAO,GAAG,MAAMH,UAAU,CAACI,IAAI,EAAE;EAErC,IAAIE,YAAY,GAAGH,OAAO,CAAC,CAAC,CAAC;EAC7B,OAAOG,YAAY;AACrB;AAGE,OAAO,eAAeC,WAAW,CAACC,aAAa,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EACnE,MAAMC,cAAc,GAAGH,aAAa;EACpC,MAAMI,aAAa,GAAGH,QAAQ;EAC9B,MAAMI,aAAa,GAAGH,QAAQ;EAC9B,IAAI;IACF,MAAMI,YAAY,GAAG,MAAMlC,KAAK,CAACe,IAAI,CAACoB,KAAK,CAACJ,cAAc,EAAEC,aAAa,EAAEC,aAAa,CAAC;IACzF,IAAIF,cAAc,EAAEC,aAAa,EAAEC,aAAa,KAAK,IAAI,EAAE,CAC3D;IACAvB,KAAK,CACF,iBAAgBwB,YAAY,CAAChB,GAAG,CAC/B,UAAU,CACV,8BAA6B,CAChC;IAEH,MAAMkB,WAAW,GAAG,MAAMpC,KAAK,CAACe,IAAI,CAACsB,OAAO,EAAE;IAC9C9B,OAAO,CAACC,GAAG,CAAC0B,YAAY,KAAKE,WAAW,CAAC;IAEzC,IAAItB,IAAI,GAAGa,WAAW,EAAG;IACzBb,IAAI,CAACE,GAAG,CAAC,WAAW,EAAEY,aAAa,CAAC;IACpCd,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEa,QAAQ,CAAC;IAC9Bf,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEc,QAAQ,CAAC;IAE9BQ,cAAc,EAAE;IAChB,OAAO,IAAI;EACb,CAAC,CAAC,OAAO7B,KAAK,EAAE;IAEdC,KAAK,CAAE,8BAA6BD,KAAK,CAACE,OAAQ,EAAC,CAAC;IACpD,OAAO,KAAK;EACd;AACF;AAAC"},"metadata":{},"sourceType":"module"}