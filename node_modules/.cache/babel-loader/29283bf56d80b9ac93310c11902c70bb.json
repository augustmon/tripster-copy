{"ast":null,"code":"import Parse from \"parse\";\nexport async function chatRoomSetup(usersArray) {\n  try {\n    const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n    chatRoomParseQuery.containsAll(\"users\", usersArray); // existing chatroom id: \"XpdGCZsn2E\" ?\n    const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n    if (chatRoomParseQueryResult !== undefined && chatRoomParseQueryResult !== null) {\n      console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n      const chatRoomObject = chatRoomParseQueryResult;\n    } else {\n      alert(\"CREATING NEW CHAT ROOM\");\n      chatRoomObject = new Parse.Object(\"ChatRoom\");\n      chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n      chatRoomObject.save();\n    }\n  } catch (error) {\n    console.log(\"ChatRoom Error\", error);\n    return false;\n  }\n  return chatRoomObject;\n}\nexport async function checkSenderAndReceiver(sender, receiver) {\n  // check if both UserName variables hold any values\n  if (Parse.User.current().id === null || sender.id === null || Parse.User.current() === undefined || receiver.id === undefined) {\n    alert(\"Please inform both sender and receiver!\");\n    return false;\n  } else {\n    console.log(\"both users present\");\n    return true;\n  }\n}","map":{"version":3,"names":["Parse","chatRoomSetup","usersArray","chatRoomParseQuery","Query","containsAll","chatRoomParseQueryResult","first","undefined","console","log","id","chatRoomObject","alert","Object","set","save","error","checkSenderAndReceiver","sender","receiver","User","current"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/chat.js"],"sourcesContent":["import Parse from \"parse\";\n\nexport async function chatRoomSetup(usersArray) {\n  try {\n    const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n    chatRoomParseQuery.containsAll(\"users\", usersArray); // existing chatroom id: \"XpdGCZsn2E\" ?\n    const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n    if (\n      chatRoomParseQueryResult !== undefined &&\n      chatRoomParseQueryResult !== null\n    ) {\n      console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n      const chatRoomObject = chatRoomParseQueryResult;\n    } else {\n      alert(\"CREATING NEW CHAT ROOM\");\n      chatRoomObject = new Parse.Object(\"ChatRoom\");\n      chatRoomObject.set(\"users\", usersArray); // POINTER OBJECTS HERE!\n      chatRoomObject.save();\n    }\n  } catch (error) {\n    console.log(\"ChatRoom Error\", error);\n    return false;\n  }\n  return chatRoomObject;\n}\n\nexport async function checkSenderAndReceiver(sender, receiver) {\n  // check if both UserName variables hold any values\n  if (\n    Parse.User.current().id === null ||\n    sender.id === null ||\n    Parse.User.current() === undefined ||\n    receiver.id === undefined\n  ) {\n    alert(\"Please inform both sender and receiver!\");\n    return false;\n  } else {\n    console.log(\"both users present\");\n    return true;\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,eAAeC,aAAa,CAACC,UAAU,EAAE;EAC9C,IAAI;IACF,MAAMC,kBAAkB,GAAG,IAAIH,KAAK,CAACI,KAAK,CAAC,UAAU,CAAC;IACtDD,kBAAkB,CAACE,WAAW,CAAC,OAAO,EAAEH,UAAU,CAAC,CAAC,CAAC;IACrD,MAAMI,wBAAwB,GAAG,MAAMH,kBAAkB,CAACI,KAAK,EAAE;IACjE,IACED,wBAAwB,KAAKE,SAAS,IACtCF,wBAAwB,KAAK,IAAI,EACjC;MACAG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,wBAAwB,CAACK,EAAE,CAAC;MACzD,MAAMC,cAAc,GAAGN,wBAAwB;IACjD,CAAC,MAAM;MACLO,KAAK,CAAC,wBAAwB,CAAC;MAC/BD,cAAc,GAAG,IAAIZ,KAAK,CAACc,MAAM,CAAC,UAAU,CAAC;MAC7CF,cAAc,CAACG,GAAG,CAAC,OAAO,EAAEb,UAAU,CAAC,CAAC,CAAC;MACzCU,cAAc,CAACI,IAAI,EAAE;IACvB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdR,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEO,KAAK,CAAC;IACpC,OAAO,KAAK;EACd;EACA,OAAOL,cAAc;AACvB;AAEA,OAAO,eAAeM,sBAAsB,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAC7D;EACA,IACEpB,KAAK,CAACqB,IAAI,CAACC,OAAO,EAAE,CAACX,EAAE,KAAK,IAAI,IAChCQ,MAAM,CAACR,EAAE,KAAK,IAAI,IAClBX,KAAK,CAACqB,IAAI,CAACC,OAAO,EAAE,KAAKd,SAAS,IAClCY,QAAQ,CAACT,EAAE,KAAKH,SAAS,EACzB;IACAK,KAAK,CAAC,yCAAyC,CAAC;IAChD,OAAO,KAAK;EACd,CAAC,MAAM;IACLJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module"}