{"ast":null,"code":"import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \" Booking key exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING KEY ERROR: \" + error.message);\n  }\n  try {\n    const bookingObject = await queryBookingObject(bookingId);\n  } catch (error) {\n    alert(\"Booking OBJECT error: \" + error.message);\n  }\n\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingObject);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(`New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`);\n    }\n  } catch (error) {\n    alert(`User Signup Error: ${error.message}`);\n  }\n}\nexport async function queryBookingId(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n  let returnKey = results[0].get(\"key\");\n  return returnKey;\n}\nasync function queryBookingObject(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n  let returnObject = results[0];\n  return returnObject;\n}","map":{"version":3,"names":["Parse","createParseUser","bookingId","name","passwordConfirm","id","queryBookingId","console","log","error","alert","message","bookingObject","queryBookingObject","user","User","set","save","get","bookingIdInput","parseQuery","Query","equalTo","results","find","returnKey","returnObject"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/user.js"],"sourcesContent":["import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  try {\n    const id = await queryBookingId(bookingId);\n    if (id !== null) {\n      console.log(id + \" Booking key exist\");\n    }\n  } catch (error) {\n    alert(\"BOOKING KEY ERROR: \" + error.message);\n  }\n\n  try {\n    const bookingObject = await queryBookingObject(bookingId);\n  } catch (error) {\n    alert(\"Booking OBJECT error: \" + error.message);\n  }\n\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingObject);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(\n        `New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`\n      );\n    }\n  } catch (error) {\n    alert(`User Signup Error: ${error.message}`);\n  }\n}\n\nexport async function queryBookingId(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n\n  let returnKey = results[0].get(\"key\");\n  return returnKey;\n}\n\nasync function queryBookingObject(bookingIdInput) {\n  let parseQuery = new Parse.Query(\"Booking\");\n  parseQuery.equalTo(\"key\", bookingIdInput);\n  let results = await parseQuery.find();\n\n  let returnObject = results[0];\n  return returnObject;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,yBAAyB;;AAE3C;AACA,OAAO,eAAeC,eAAe,CAACC,SAAS,EAAEC,IAAI,EAAEC,eAAe,EAAE;EACtE;EACA,IAAI;IACF,MAAMC,EAAE,GAAG,MAAMC,cAAc,CAACJ,SAAS,CAAC;IAC1C,IAAIG,EAAE,KAAK,IAAI,EAAE;MACfE,OAAO,CAACC,GAAG,CAACH,EAAE,GAAG,oBAAoB,CAAC;IACxC;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,KAAK,CAAC,qBAAqB,GAAGD,KAAK,CAACE,OAAO,CAAC;EAC9C;EAEA,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMC,kBAAkB,CAACX,SAAS,CAAC;EAC3D,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,KAAK,CAAC,wBAAwB,GAAGD,KAAK,CAACE,OAAO,CAAC;EACjD;;EAEA;EACA,IAAIG,IAAI,GAAG,IAAId,KAAK,CAACe,IAAI,EAAE;EAC3B;EACAD,IAAI,CAACE,GAAG,CAAC,WAAW,EAAEJ,aAAa,CAAC;EACpCE,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEb,IAAI,CAAC;EAC1BW,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEZ,eAAe,CAAC;EACrC,IAAI;IACF;IACAU,IAAI,GAAG,MAAMA,IAAI,CAACG,IAAI,EAAE;IACxB,IAAIH,IAAI,KAAK,IAAI,EAAE;MACjB;MACAJ,KAAK,CACF,8CAA6CI,IAAI,CAACT,EAAG;AAC9D,UAAUS,IAAI,CAACI,GAAG,CAAC,UAAU,CAAE,KAAIJ,IAAI,CAACI,GAAG,CAAC,UAAU,CAAE,EAAC,CAClD;IACH;EACF,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,KAAK,CAAE,sBAAqBD,KAAK,CAACE,OAAQ,EAAC,CAAC;EAC9C;AACF;AAEA,OAAO,eAAeL,cAAc,CAACa,cAAc,EAAE;EACnD,IAAIC,UAAU,GAAG,IAAIpB,KAAK,CAACqB,KAAK,CAAC,SAAS,CAAC;EAC3CD,UAAU,CAACE,OAAO,CAAC,KAAK,EAAEH,cAAc,CAAC;EACzC,IAAII,OAAO,GAAG,MAAMH,UAAU,CAACI,IAAI,EAAE;EAErC,IAAIC,SAAS,GAAGF,OAAO,CAAC,CAAC,CAAC,CAACL,GAAG,CAAC,KAAK,CAAC;EACrC,OAAOO,SAAS;AAClB;AAEA,eAAeZ,kBAAkB,CAACM,cAAc,EAAE;EAChD,IAAIC,UAAU,GAAG,IAAIpB,KAAK,CAACqB,KAAK,CAAC,SAAS,CAAC;EAC3CD,UAAU,CAACE,OAAO,CAAC,KAAK,EAAEH,cAAc,CAAC;EACzC,IAAII,OAAO,GAAG,MAAMH,UAAU,CAACI,IAAI,EAAE;EAErC,IAAIE,YAAY,GAAGH,OAAO,CAAC,CAAC,CAAC;EAC7B,OAAOG,YAAY;AACrB"},"metadata":{},"sourceType":"module"}