{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/components/DisplayUsers/DisplayUsers.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Parse from \"parse\";\nimport UserLink from \"../UserLink/UserLink\";\nimport ChatLink from \"../UserLink/ChatLink\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DisplayUsers(props) {\n  _s();\n  const [localUsers, setLocalUsers] = useState([]);\n  const [activeChats, setActiveChats] = useState([]);\n  useEffect(() => {\n    // In Discover page:\n    if (props.displayMode === \"discover\") {\n      queryAllUsers().then(result => {\n        if (localUsers.length === 0) {\n          setLocalUsers(result);\n        } else {\n          console.log(\"localUsers is set\");\n        }\n      });\n    }\n    // In ActiveChats page:\n    else if (props.displayMode === \"active\") {\n      queryActiveChats().then(result => {\n        if (activeChats === undefined || activeChats.length === 0) {\n          setActiveChats(result);\n        } else {\n          console.log(\"active chats set\");\n        }\n      });\n    }\n  }, []);\n\n  //// IMPORT THIS FROM API\n  async function queryActiveChats() {\n    try {\n      const currentUser = Parse.User.current();\n      console.log(\"querying chats with\", currentUser.get(\"username\"));\n      const otherUserQuery = new Parse.Query(\"User\");\n      otherUserQuery.notEqualTo(\"objectId\", currentUser.id);\n      const otherUsers = await otherUserQuery.find();\n      const queryChats = new Parse.Query(\"ChatRoom\");\n      queryChats.equalTo(\"users\", currentUser);\n      queryChats.containedIn(\"users\", otherUsers);\n\n      // queryChats.exists(\"users\");\n      const allActiveChats = await queryChats.find();\n      if (allActiveChats.length === 0) {\n        return false;\n      }\n      console.log(allActiveChats.map(chat => chat.get(\"users\")));\n      return allActiveChats;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  //// IMPORT THIS FROM API\n  async function queryAllUsers() {\n    try {\n      // const activeChats = await queryActiveChats();\n      const currentUser = Parse.User.current();\n      const queryUsers = new Parse.Query(\"User\");\n      queryUsers.notEqualTo(\"objectId\", currentUser.id); // I need to get only users that are not in any active chats from array\n      // queryUsers.notContainedIn(\"users\", activeChats);\n      //\n      const allUserObjects = await queryUsers.find();\n      return allUserObjects;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  ////\n\n  //// IMPORT THIS FROM API\n  async function queryGroupChats() {\n    const groupChatQuery = new Parse.Query(\"ChatRoom\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display-users\",\n    children: [props.displayMode === \"active\" && activeChats === false && /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"body\",\n      children: \"You have no active chats. Find someone to chat with on the 'Discover' page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), localUsers && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: localUsers.map(user => /*#__PURE__*/_jsxDEV(UserLink, {\n        onClick: () => props.setChatUsers([user, Parse.User.current()]),\n        to: \"/chatroom\",\n        username: user.get(\"username\"),\n        nationality: user.get(\"nationality\"),\n        status: user.get(\"status\"),\n        photo: user.get(\"photo\").url()\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), activeChats && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: activeChats.map(chat => /*#__PURE__*/_jsxDEV(ChatLink, {\n        onClick: () => props.setChatUsers(chat.get(\"users\")),\n        chat: chat,\n        to: \"/chatroom\"\n        // username={\"chat with \" + chat.get(\"users\")[1].get(\"username\")}\n      }, chat.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this)\n\n  //\n  ;\n}\n_s(DisplayUsers, \"EdfE5SFsIdt05glOIOlWLjT+F9c=\");\n_c = DisplayUsers;\nvar _c;\n$RefreshReg$(_c, \"DisplayUsers\");","map":{"version":3,"names":["React","useState","useEffect","Parse","UserLink","ChatLink","DisplayUsers","props","localUsers","setLocalUsers","activeChats","setActiveChats","displayMode","queryAllUsers","then","result","length","console","log","queryActiveChats","undefined","currentUser","User","current","get","otherUserQuery","Query","notEqualTo","id","otherUsers","find","queryChats","equalTo","containedIn","allActiveChats","map","chat","error","queryUsers","allUserObjects","queryGroupChats","groupChatQuery","user","setChatUsers","url"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/components/DisplayUsers/DisplayUsers.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Parse from \"parse\";\nimport UserLink from \"../UserLink/UserLink\";\nimport ChatLink from \"../UserLink/ChatLink\";\n\nexport default function DisplayUsers(props) {\n  const [localUsers, setLocalUsers] = useState([]);\n  const [activeChats, setActiveChats] = useState([]);\n\n  useEffect(() => {\n    // In Discover page:\n    if (props.displayMode === \"discover\") {\n      queryAllUsers().then((result) => {\n        if (localUsers.length === 0) {\n          setLocalUsers(result);\n        } else {\n          console.log(\"localUsers is set\");\n        }\n      });\n    }\n    // In ActiveChats page:\n    else if (props.displayMode === \"active\") {\n      queryActiveChats().then((result) => {\n        if (activeChats === undefined || activeChats.length === 0) {\n          setActiveChats(result);\n        } else {\n          console.log(\"active chats set\");\n        }\n      });\n    }\n  }, []);\n\n  //// IMPORT THIS FROM API\n  async function queryActiveChats() {\n    try {\n      const currentUser = Parse.User.current();\n      console.log(\"querying chats with\", currentUser.get(\"username\"));\n\n      const otherUserQuery = new Parse.Query(\"User\");\n      otherUserQuery.notEqualTo(\"objectId\", currentUser.id);\n      const otherUsers = await otherUserQuery.find();\n\n      const queryChats = new Parse.Query(\"ChatRoom\");\n      queryChats.equalTo(\"users\", currentUser);\n      queryChats.containedIn(\"users\", otherUsers);\n\n      // queryChats.exists(\"users\");\n      const allActiveChats = await queryChats.find();\n      if (allActiveChats.length === 0) {\n        return false;\n      }\n      console.log(allActiveChats.map((chat) => chat.get(\"users\")));\n\n      return allActiveChats;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  //// IMPORT THIS FROM API\n  async function queryAllUsers() {\n    try {\n      // const activeChats = await queryActiveChats();\n      const currentUser = Parse.User.current();\n      const queryUsers = new Parse.Query(\"User\");\n      queryUsers.notEqualTo(\"objectId\", currentUser.id); // I need to get only users that are not in any active chats from array\n      // queryUsers.notContainedIn(\"users\", activeChats);\n      //\n      const allUserObjects = await queryUsers.find();\n\n      return allUserObjects;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  ////\n\n  //// IMPORT THIS FROM API\n  async function queryGroupChats() {\n    const groupChatQuery = new Parse.Query(\"ChatRoom\");\n  }\n\n  return (\n    <div className=\"display-users\">\n      {props.displayMode === \"active\" && activeChats === false && (\n        <h3 className=\"body\">\n          You have no active chats. Find someone to chat with on the 'Discover'\n          page.\n        </h3>\n      )}\n\n      {localUsers && (\n        <ul>\n          {localUsers.map((user) => (\n            <UserLink\n              key={user.id}\n              onClick={() => props.setChatUsers([user, Parse.User.current()])}\n              to=\"/chatroom\"\n              username={user.get(\"username\")}\n              nationality={user.get(\"nationality\")}\n              status={user.get(\"status\")}\n              photo={user.get(\"photo\").url()}\n            />\n          ))}\n        </ul>\n      )}\n\n      {activeChats && (\n        <ul>\n          {activeChats.map((chat) => (\n            <ChatLink\n              onClick={() => props.setChatUsers(chat.get(\"users\"))}\n              key={chat.id}\n              chat={chat}\n              to=\"/chatroom\"\n              // username={\"chat with \" + chat.get(\"users\")[1].get(\"username\")}\n            />\n          ))}\n        </ul>\n      )}\n    </div>\n\n    //\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}