{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/ChatList/ChatList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatSetup(props) {\n  _s();\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n  // const [chatRoomObject, setChatRoomObject] = useState(null);\n\n  useEffect(() => {\n    setSenderUserName(currentUserName);\n    setReceiverUserName(props.receiverNameInput);\n  }, []);\n  function getChatReady() {\n    const currentUser = Parse.User.current();\n    const currentUserName = currentUser.get(\"username\");\n    console.log(\"Current user name: \", currentUserName);\n    const usersArray = [senderUserName, receiverUserName];\n    console.log(\"users array\", usersArray);\n    async function startLiveChat() {\n      console.log(\"Starting live chat\");\n\n      // check if both *UserName variables hold any values\n      if (senderUserName === null || receiverUserName === null) {\n        alert(\"Please inform both sender and receiver user names!\");\n        return false;\n      }\n      let chatRoomObject = null;\n      try {\n        const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n        // HOW TO MAKE QUERY BASED ON ARRAY ???\n        chatRoomParseQuery.containsAll(\"users\", [\"testman\", \"bbb\"]); // existing chatroom id: \"XpdGCZsn2E\" ?\n        const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n        if (chatRoomParseQueryResult !== undefined && chatRoomParseQueryResult !== null) {\n          console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n          chatRoomObject = chatRoomParseQueryResult;\n        } else {\n          alert(\"CREATING NEW CHAT ROOM\");\n          chatRoomObject = new Parse.Object(\"ChatRoom\");\n          chatRoomObject.set(\"users\", usersArray);\n          chatRoomObject.save();\n        }\n      } catch (error) {\n        console.log(\"ChatRoom Error\", error);\n        return false;\n      }\n      let senderUserObject = null;\n      try {\n        const senderParseQuery = new Parse.Query(\"User\");\n        senderParseQuery.equalTo(\"username\", senderUserName);\n        const senderParseQueryResult = await senderParseQuery.first();\n        if (senderParseQueryResult !== undefined && senderParseQueryResult !== null) {\n          senderUserObject = senderParseQueryResult;\n        } else {\n          alert(\"Sender does not exist!\");\n        }\n      } catch (error) {\n        alert(error);\n        return false;\n      }\n      let receiverUserObject = null;\n      try {\n        const receiverParseQuery = new Parse.Query(\"User\");\n        receiverParseQuery.equalTo(\"username\", receiverUserName);\n        const receiverParseQueryResult = await receiverParseQuery.first();\n        if (receiverParseQueryResult !== undefined && receiverParseQueryResult !== null) {\n          receiverUserObject = receiverParseQueryResult;\n          console.log(\"Receiver User ID: \", receiverUserObject.id);\n        } else {\n          alert(\"Receiver does not exist!\");\n        }\n      } catch (error) {\n        alert(\"Caught this error: \", error);\n        return false;\n      }\n\n      // set user object ids, so live chat component is instantiated\n      setSenderUserId(senderUserObject.id);\n      setReceiverUserId(receiverUserObject.id);\n      setChatRoomId(chatRoomObject.id);\n      console.log(\"RECEIVER USER NAME: \", receiverUserName);\n      console.log(\"RECEIVER USER ID: \", receiverUserId);\n      return true;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", props.receiverNameInput]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), senderUserId === null && receiverUserId === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startLiveChat,\n        children: \"Start Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), senderUserId !== null && receiverUserId !== null && senderUserId !== undefined && receiverUserId !== undefined && /*#__PURE__*/_jsxDEV(LiveChat, {\n      senderUserName: senderUserName,\n      senderUserId: senderUserId,\n      receiverUserName: receiverUserName,\n      receiverUserId: receiverUserId,\n      chatRoomId: chatRoomId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatSetup, \"LcKkMJKQD9cYlCamGqebV9sEn6M=\");\n_c = ChatSetup;\nvar _c;\n$RefreshReg$(_c, \"ChatSetup\");","map":{"version":3,"names":["React","useEffect","useState","Parse","LiveChat","ChatList","ChatSetup","props","senderUserName","setSenderUserName","senderUserId","setSenderUserId","receiverUserName","setReceiverUserName","receiverUserId","setReceiverUserId","chatRoomId","setChatRoomId","currentUserName","receiverNameInput","getChatReady","currentUser","User","current","get","console","log","usersArray","startLiveChat","alert","chatRoomObject","chatRoomParseQuery","Query","containsAll","chatRoomParseQueryResult","first","undefined","id","Object","set","save","error","senderUserObject","senderParseQuery","equalTo","senderParseQueryResult","receiverUserObject","receiverParseQuery","receiverParseQueryResult"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/ChatList/ChatList\";\n\nexport default function ChatSetup(props) {\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n  // const [chatRoomObject, setChatRoomObject] = useState(null);\n\n  useEffect(() => {\n    setSenderUserName(currentUserName);\n    setReceiverUserName(props.receiverNameInput);\n  }, []);\n\n  function getChatReady() {\n    const currentUser = Parse.User.current();\n    const currentUserName = currentUser.get(\"username\");\n\n    console.log(\"Current user name: \", currentUserName);\n    const usersArray = [senderUserName, receiverUserName];\n    console.log(\"users array\", usersArray);\n\n    async function startLiveChat() {\n      console.log(\"Starting live chat\");\n\n      // check if both *UserName variables hold any values\n      if (senderUserName === null || receiverUserName === null) {\n        alert(\"Please inform both sender and receiver user names!\");\n        return false;\n      }\n\n      let chatRoomObject = null;\n      try {\n        const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n        // HOW TO MAKE QUERY BASED ON ARRAY ???\n        chatRoomParseQuery.containsAll(\"users\", [\"testman\", \"bbb\"]); // existing chatroom id: \"XpdGCZsn2E\" ?\n        const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n        if (\n          chatRoomParseQueryResult !== undefined &&\n          chatRoomParseQueryResult !== null\n        ) {\n          console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n          chatRoomObject = chatRoomParseQueryResult;\n        } else {\n          alert(\"CREATING NEW CHAT ROOM\");\n          chatRoomObject = new Parse.Object(\"ChatRoom\");\n          chatRoomObject.set(\"users\", usersArray);\n          chatRoomObject.save();\n        }\n      } catch (error) {\n        console.log(\"ChatRoom Error\", error);\n        return false;\n      }\n\n      let senderUserObject = null;\n      try {\n        const senderParseQuery = new Parse.Query(\"User\");\n        senderParseQuery.equalTo(\"username\", senderUserName);\n        const senderParseQueryResult = await senderParseQuery.first();\n        if (\n          senderParseQueryResult !== undefined &&\n          senderParseQueryResult !== null\n        ) {\n          senderUserObject = senderParseQueryResult;\n        } else {\n          alert(\"Sender does not exist!\");\n        }\n      } catch (error) {\n        alert(error);\n        return false;\n      }\n\n      let receiverUserObject = null;\n      try {\n        const receiverParseQuery = new Parse.Query(\"User\");\n        receiverParseQuery.equalTo(\"username\", receiverUserName);\n        const receiverParseQueryResult = await receiverParseQuery.first();\n        if (\n          receiverParseQueryResult !== undefined &&\n          receiverParseQueryResult !== null\n        ) {\n          receiverUserObject = receiverParseQueryResult;\n          console.log(\"Receiver User ID: \", receiverUserObject.id);\n        } else {\n          alert(\"Receiver does not exist!\");\n        }\n      } catch (error) {\n        alert(\"Caught this error: \", error);\n        return false;\n      }\n\n      // set user object ids, so live chat component is instantiated\n      setSenderUserId(senderUserObject.id);\n      setReceiverUserId(receiverUserObject.id);\n      setChatRoomId(chatRoomObject.id);\n      console.log(\"RECEIVER USER NAME: \", receiverUserName);\n      console.log(\"RECEIVER USER ID: \", receiverUserId);\n      return true;\n    }\n  }\n\n  return (\n    <div>\n      <h1> {props.receiverNameInput}</h1>\n      {senderUserId === null && receiverUserId === null && (\n        <div>\n          <button onClick={startLiveChat}>Start Live Chat</button>\n        </div>\n      )}\n      {senderUserId !== null &&\n        receiverUserId !== null &&\n        senderUserId !== undefined &&\n        receiverUserId !== undefined && (\n          <LiveChat\n            senderUserName={senderUserName}\n            senderUserId={senderUserId}\n            receiverUserName={receiverUserName}\n            receiverUserId={receiverUserId}\n            chatRoomId={chatRoomId}\n          />\n        )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}