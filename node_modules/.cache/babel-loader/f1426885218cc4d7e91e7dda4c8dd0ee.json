{"ast":null,"code":"import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  queryBookingId(bookingNumber);\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingId);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(`New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`);\n    }\n  } catch (error) {\n    alert(`Error: ${error.message}`);\n  }\n}\nexport function queryBookingId(bookingIdInput) {\n  const Booking = Parse.Object.extend(\"Booking\");\n  let query = new Parse.Query(Booking);\n  query.equalTo(\"key\", bookingIdInput);\n  query.find().then(result => {\n    alert(`Succesfully found a booking: ${result.get(\"key\")}`);\n  });\n}","map":{"version":3,"names":["Parse","createParseUser","bookingId","name","passwordConfirm","queryBookingId","bookingNumber","user","User","set","save","alert","id","get","error","message","bookingIdInput","Booking","Object","extend","query","Query","equalTo","find","then","result"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/user.js"],"sourcesContent":["import Parse from \"parse/dist/parse.min.js\";\n\n// Create a new User\nexport async function createParseUser(bookingId, name, passwordConfirm) {\n  // check if bookingId exists!\n  queryBookingId(bookingNumber);\n  // Creates a new Parse \"User\" object, which is created by default in your Parse app\n  let user = new Parse.User();\n  // Set the input values to the new \"User\" object\n  user.set(\"bookingId\", bookingId);\n  user.set(\"username\", name);\n  user.set(\"password\", passwordConfirm);\n  try {\n    // Call the save method, which returns the saved object if successful\n    user = await user.save();\n    if (user !== null) {\n      // Notify the success by getting the attributes from the \"User\" object, by using the get method (the id attribute needs to be accessed directly, though)\n      alert(\n        `New object created with success! ObjectId: ${user.id}, \n        ${user.get(\"username\")}, ${user.get(\"password\")}`\n      );\n    }\n  } catch (error) {\n    alert(`Error: ${error.message}`);\n  }\n}\n\nexport function queryBookingId(bookingIdInput) {\n  const Booking = Parse.Object.extend(\"Booking\");\n  let query = new Parse.Query(Booking);\n  query.equalTo(\"key\", bookingIdInput);\n  query.find().then((result) => {\n    alert(`Succesfully found a booking: ${result.get(\"key\")}`);\n  });\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,yBAAyB;;AAE3C;AACA,OAAO,eAAeC,eAAe,CAACC,SAAS,EAAEC,IAAI,EAAEC,eAAe,EAAE;EACtE;EACAC,cAAc,CAACC,aAAa,CAAC;EAC7B;EACA,IAAIC,IAAI,GAAG,IAAIP,KAAK,CAACQ,IAAI,EAAE;EAC3B;EACAD,IAAI,CAACE,GAAG,CAAC,WAAW,EAAEP,SAAS,CAAC;EAChCK,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEN,IAAI,CAAC;EAC1BI,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEL,eAAe,CAAC;EACrC,IAAI;IACF;IACAG,IAAI,GAAG,MAAMA,IAAI,CAACG,IAAI,EAAE;IACxB,IAAIH,IAAI,KAAK,IAAI,EAAE;MACjB;MACAI,KAAK,CACF,8CAA6CJ,IAAI,CAACK,EAAG;AAC9D,UAAUL,IAAI,CAACM,GAAG,CAAC,UAAU,CAAE,KAAIN,IAAI,CAACM,GAAG,CAAC,UAAU,CAAE,EAAC,CAClD;IACH;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,KAAK,CAAE,UAASG,KAAK,CAACC,OAAQ,EAAC,CAAC;EAClC;AACF;AAEA,OAAO,SAASV,cAAc,CAACW,cAAc,EAAE;EAC7C,MAAMC,OAAO,GAAGjB,KAAK,CAACkB,MAAM,CAACC,MAAM,CAAC,SAAS,CAAC;EAC9C,IAAIC,KAAK,GAAG,IAAIpB,KAAK,CAACqB,KAAK,CAACJ,OAAO,CAAC;EACpCG,KAAK,CAACE,OAAO,CAAC,KAAK,EAAEN,cAAc,CAAC;EACpCI,KAAK,CAACG,IAAI,EAAE,CAACC,IAAI,CAAEC,MAAM,IAAK;IAC5Bd,KAAK,CAAE,gCAA+Bc,MAAM,CAACZ,GAAG,CAAC,KAAK,CAAE,EAAC,CAAC;EAC5D,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}