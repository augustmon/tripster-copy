{"ast":null,"code":"var _jsxFileName = \"/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { Link } from \"react-router-dom\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/ChatList/ChatList\";\nimport ChatRoom from \"../pages/ChatRoom/ChatRoom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatSetup(props) {\n  _s();\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n  // const [chatRoomObject, setChatRoomObject] = useState(null);\n  const currentUserName = props.senderNameInput;\n  // const currentUserName = currentUser.get(\"username\");\n  useEffect(() => {\n    setSenderUserName(currentUserName);\n    setReceiverUserName(props.receiverNameInput);\n  }, []);\n  async function startLiveChat() {\n    console.log(\"Current user name: \", currentUserName);\n    const usersArray = [senderUserName, receiverUserName];\n    console.log(\"users array\", usersArray);\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (senderUserName === null || receiverUserName === null) {\n      alert(\"Please inform both sender and receiver user names!\");\n      return false;\n    }\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", [\"testman\", \"bbb\"]); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (chatRoomParseQueryResult !== undefined && chatRoomParseQueryResult !== null) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray);\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n    let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (senderParseQueryResult !== undefined && senderParseQueryResult !== null) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n    let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (receiverParseQueryResult !== undefined && receiverParseQueryResult !== null) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User ID: \", receiverUserObject.id);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    }\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(senderUserObject.id);\n    setReceiverUserId(receiverUserObject.id);\n    setChatRoomId(chatRoomObject.id);\n    console.log(\"RECEIVER USER NAME: \", receiverUserName);\n    console.log(\"RECEIVER USER ID: \", receiverUserId);\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: \"/chatroom\"\n      },\n      onClick: startLiveChat,\n      children: [\"Chat with \", props.receiverNameInput]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatSetup, \"LcKkMJKQD9cYlCamGqebV9sEn6M=\");\n_c = ChatSetup;\nvar _c;\n$RefreshReg$(_c, \"ChatSetup\");","map":{"version":3,"names":["React","useEffect","useState","Parse","Link","LiveChat","ChatList","ChatRoom","ChatSetup","props","senderUserName","setSenderUserName","senderUserId","setSenderUserId","receiverUserName","setReceiverUserName","receiverUserId","setReceiverUserId","chatRoomId","setChatRoomId","currentUserName","senderNameInput","receiverNameInput","startLiveChat","console","log","usersArray","alert","chatRoomObject","chatRoomParseQuery","Query","containsAll","chatRoomParseQueryResult","first","undefined","id","Object","set","save","error","senderUserObject","senderParseQuery","equalTo","senderParseQueryResult","receiverUserObject","receiverParseQuery","receiverParseQueryResult","pathname"],"sources":["/Users/august/Documents/ITU/TID/exam/tripster/src/api/ChatSetup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Parse from \"parse\";\nimport { Link } from \"react-router-dom\";\n\n//COMPONENTS\nimport LiveChat from \"./LiveChat\";\nimport ChatList from \"../components/ChatList/ChatList\";\nimport ChatRoom from \"../pages/ChatRoom/ChatRoom\";\n\nexport default function ChatSetup(props) {\n  const [senderUserName, setSenderUserName] = useState(\"\");\n  const [senderUserId, setSenderUserId] = useState(null);\n  const [receiverUserName, setReceiverUserName] = useState(\"\");\n  const [receiverUserId, setReceiverUserId] = useState(null);\n  const [chatRoomId, setChatRoomId] = useState(null);\n  // const [chatRoomObject, setChatRoomObject] = useState(null);\n  const currentUserName = props.senderNameInput;\n  // const currentUserName = currentUser.get(\"username\");\n  useEffect(() => {\n    setSenderUserName(currentUserName);\n    setReceiverUserName(props.receiverNameInput);\n  }, []);\n\n  async function startLiveChat() {\n    console.log(\"Current user name: \", currentUserName);\n    const usersArray = [senderUserName, receiverUserName];\n    console.log(\"users array\", usersArray);\n    console.log(\"Starting live chat\");\n\n    // check if both *UserName variables hold any values\n    if (senderUserName === null || receiverUserName === null) {\n      alert(\"Please inform both sender and receiver user names!\");\n      return false;\n    }\n\n    let chatRoomObject = null;\n    try {\n      const chatRoomParseQuery = new Parse.Query(\"ChatRoom\");\n      // HOW TO MAKE QUERY BASED ON ARRAY ???\n      chatRoomParseQuery.containsAll(\"users\", [\"testman\", \"bbb\"]); // existing chatroom id: \"XpdGCZsn2E\" ?\n      const chatRoomParseQueryResult = await chatRoomParseQuery.first();\n      if (\n        chatRoomParseQueryResult !== undefined &&\n        chatRoomParseQueryResult !== null\n      ) {\n        console.log(\"Chat Room ID:\", chatRoomParseQueryResult.id);\n        chatRoomObject = chatRoomParseQueryResult;\n      } else {\n        alert(\"CREATING NEW CHAT ROOM\");\n        chatRoomObject = new Parse.Object(\"ChatRoom\");\n        chatRoomObject.set(\"users\", usersArray);\n        chatRoomObject.save();\n      }\n    } catch (error) {\n      console.log(\"ChatRoom Error\", error);\n      return false;\n    }\n\n    let senderUserObject = null;\n    try {\n      const senderParseQuery = new Parse.Query(\"User\");\n      senderParseQuery.equalTo(\"username\", senderUserName);\n      const senderParseQueryResult = await senderParseQuery.first();\n      if (\n        senderParseQueryResult !== undefined &&\n        senderParseQueryResult !== null\n      ) {\n        senderUserObject = senderParseQueryResult;\n      } else {\n        alert(\"Sender does not exist!\");\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n\n    let receiverUserObject = null;\n    try {\n      const receiverParseQuery = new Parse.Query(\"User\");\n      receiverParseQuery.equalTo(\"username\", receiverUserName);\n      const receiverParseQueryResult = await receiverParseQuery.first();\n      if (\n        receiverParseQueryResult !== undefined &&\n        receiverParseQueryResult !== null\n      ) {\n        receiverUserObject = receiverParseQueryResult;\n        console.log(\"Receiver User ID: \", receiverUserObject.id);\n      } else {\n        alert(\"Receiver does not exist!\");\n      }\n    } catch (error) {\n      alert(\"Caught this error: \", error);\n      return false;\n    }\n\n    // set user object ids, so live chat component is instantiated\n    setSenderUserId(senderUserObject.id);\n    setReceiverUserId(receiverUserObject.id);\n    setChatRoomId(chatRoomObject.id);\n    console.log(\"RECEIVER USER NAME: \", receiverUserName);\n    console.log(\"RECEIVER USER ID: \", receiverUserId);\n    return true;\n  }\n\n  return (\n    <div>\n      {/* <h1> {props.receiverNameInput}</h1>\n      {senderUserId === null && receiverUserId === null && (\n        <div>\n          <button onClick={startLiveChat}>{props.receiverNameInput}</button>\n        </div>\n      )}\n      {senderUserId !== null &&\n        receiverUserId !== null &&\n        senderUserId !== undefined &&\n        receiverUserId !== undefined && ( */}{\" \"}\n      <Link to={{ pathname: \"/chatroom\" }} onClick={startLiveChat}>\n        Chat with {props.receiverNameInput}\n      </Link>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}